package edu.ncsu.csc326.coffeemaker;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addSugar("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    edu.ncsu.csc326.coffeemaker.Recipe recipe1 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b2 = inventory0.useIngredients(recipe1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe4 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = recipeBook0.editRecipe((int)'#', recipe4);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    int i5 = inventory0.getChocolate();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addSugar("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    // The following exception was thrown during execution in test generation
    try {
    recipe0.setAmtSugar("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe4 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i5 = recipe4.getPrice();
    int i6 = recipe4.getAmtChocolate();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = recipeBook0.editRecipe((int)(short)10, recipe4);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i1 = recipe0.getPrice();
    // The following exception was thrown during execution in test generation
    try {
    recipe0.setAmtSugar("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i1 = recipe0.getPrice();
    java.lang.String str2 = recipe0.toString();
    // The following exception was thrown during execution in test generation
    try {
    recipe0.setAmtSugar("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook2 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str4 = recipeBook2.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe5 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b6 = recipeBook2.addRecipe(recipe5);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str7 = coffeeMaker0.editRecipe((int)(byte)100, recipe5);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str4 = recipeBook0.deleteRecipe(15);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i1 = recipe0.getPrice();
    int i2 = recipe0.getAmtChocolate();
    // The following exception was thrown during execution in test generation
    try {
    recipe0.setPrice("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    // The following exception was thrown during execution in test generation
    try {
    recipe2.setAmtSugar("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("hi!", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!", "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    int i5 = inventory0.getChocolate();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addSugar("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    // The following exception was thrown during execution in test generation
    try {
    recipe0.setAmtChocolate("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    // The following exception was thrown during execution in test generation
    try {
    int i17 = coffeeMaker0.makeCoffee((int)(byte)-1, (int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    int i10 = inventory0.getCoffee();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    int i5 = recipe3.getAmtCoffee();
    int i6 = recipe3.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    recipe3.setPrice("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addSugar("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = recipeBook0.addRecipe(recipe7);
    // The following exception was thrown during execution in test generation
    try {
    recipe7.setPrice("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!", "", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!", "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    int i5 = recipe3.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory6 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i7 = inventory6.getMilk();
    int i8 = inventory6.getCoffee();
    inventory6.setChocolate((int)(byte)-1);
    int i11 = inventory6.getChocolate();
    boolean b12 = recipe3.equals((java.lang.Object)inventory6);
    // The following exception was thrown during execution in test generation
    try {
    recipe3.setAmtMilk("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    int i10 = inventory0.getCoffee();
    int i11 = inventory0.getChocolate();
    inventory0.setCoffee(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    // The following exception was thrown during execution in test generation
    try {
    recipe8.setPrice("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i3 = recipe2.getPrice();
    java.lang.String str4 = recipe2.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = coffeeMaker0.editRecipe((int)(byte)10, recipe2);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    java.lang.String str11 = recipe6.getName();
    // The following exception was thrown during execution in test generation
    try {
    recipe6.setPrice("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = recipeBook0.addRecipe(recipe7);
    // The following exception was thrown during execution in test generation
    try {
    recipe7.setPrice("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = recipeBook0.addRecipe(recipe7);
    recipe7.setName("hi!");
    // The following exception was thrown during execution in test generation
    try {
    recipe7.setPrice("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setMilk((-1));
    inventory0.setChocolate((-1));
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addSugar("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setMilk((-1));
    inventory0.setChocolate((-1));
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addChocolate("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    // The following exception was thrown during execution in test generation
    try {
    int i24 = coffeeMaker0.makeCoffee((int)(byte)-1, (int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = coffeeMaker0.deleteRecipe((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    int i5 = inventory0.getChocolate();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    inventory0.setMilk((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    // The following exception was thrown during execution in test generation
    try {
    recipe17.setAmtCoffee("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("hi!");
    java.lang.Throwable[] throwable_array2 = recipeException1.getSuppressed();
    java.lang.Throwable[] throwable_array3 = recipeException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array3);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    int i23 = recipe17.getAmtSugar();
    boolean b25 = recipe17.equals((java.lang.Object)15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = inventory0.getChocolate();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = recipeBook0.addRecipe(recipe7);
    recipe7.setName("hi!");
    // The following exception was thrown during execution in test generation
    try {
    recipe7.setAmtSugar("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str17 = coffeeMaker0.deleteRecipe((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    // The following exception was thrown during execution in test generation
    try {
    int i19 = coffeeMaker0.makeCoffee((int)(short)-1, 15);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook17 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory18.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook21 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str23 = recipeBook21.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe24 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b25 = recipeBook21.addRecipe(recipe24);
    int i26 = recipe24.getAmtCoffee();
    int i27 = recipe24.getAmtCoffee();
    boolean b28 = inventory18.useIngredients(recipe24);
    java.lang.String str29 = recipe24.getName();
    boolean b30 = recipeBook17.addRecipe(recipe24);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str31 = coffeeMaker0.editRecipe((int)'#', recipe24);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    java.lang.String str23 = recipe17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory1 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory1.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = inventory1.useIngredients(recipe7);
    java.lang.String str12 = recipe7.getName();
    boolean b13 = recipeBook0.addRecipe(recipe7);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str15 = recipeBook0.deleteRecipe((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!", "", "hi!", "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    // The following exception was thrown during execution in test generation
    try {
    recipe3.setAmtCoffee("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    int i5 = recipe3.getAmtCoffee();
    int i6 = recipe3.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    recipe3.setPrice("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    edu.ncsu.csc326.coffeemaker.Recipe recipe16 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i17 = recipe16.getPrice();
    int i18 = recipe16.getAmtChocolate();
    java.lang.String str19 = coffeeMaker0.editRecipe(0, recipe16);
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i22 = recipe21.getPrice();
    java.lang.String str23 = recipe21.toString();
    int i24 = recipe21.getPrice();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str25 = coffeeMaker0.editRecipe(15, recipe21);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + ""+ "'", str23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i1 = recipe0.getPrice();
    int i2 = recipe0.getAmtChocolate();
    int i3 = recipe0.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    recipe0.setAmtCoffee("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i1 = recipe0.getPrice();
    int i2 = recipe0.getAmtChocolate();
    int i3 = recipe0.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    recipe0.setPrice("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    int i5 = recipe3.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory6 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i7 = inventory6.getMilk();
    int i8 = inventory6.getCoffee();
    inventory6.setChocolate((int)(byte)-1);
    int i11 = inventory6.getChocolate();
    boolean b12 = recipe3.equals((java.lang.Object)inventory6);
    // The following exception was thrown during execution in test generation
    try {
    inventory6.addCoffee("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    // The following exception was thrown during execution in test generation
    try {
    int i19 = coffeeMaker0.makeCoffee((int)(byte)10, (int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    java.lang.String str10 = inventory0.toString();
    inventory0.setMilk((int)(short)0);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addChocolate("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str10.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = recipeBook0.addRecipe(recipe7);
    recipe7.setName("hi!");
    // The following exception was thrown during execution in test generation
    try {
    recipe7.setAmtMilk("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    // The following exception was thrown during execution in test generation
    try {
    int i3 = coffeeMaker0.makeCoffee((-1), (int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    int i23 = recipe17.getPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    java.lang.String str10 = inventory0.toString();
    inventory0.setChocolate((int)(short)-1);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addSugar("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str10.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str2 = coffeeMaker0.deleteRecipe((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    java.lang.String str10 = inventory0.toString();
    inventory0.setMilk((int)(short)0);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str10.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("hi!");
    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException3 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("hi!");
    java.lang.Throwable[] throwable_array4 = recipeException3.getSuppressed();
    recipeException1.addSuppressed((java.lang.Throwable)recipeException3);
    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException7 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("hi!");
    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException9 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("hi!");
    java.lang.Throwable[] throwable_array10 = recipeException9.getSuppressed();
    recipeException7.addSuppressed((java.lang.Throwable)recipeException9);
    recipeException3.addSuppressed((java.lang.Throwable)recipeException9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array10);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    java.lang.String str2 = inventoryException1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"+ "'", str2.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"));

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    inventory0.setCoffee(1);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    // The following exception was thrown during execution in test generation
    try {
    int i3 = coffeeMaker0.makeCoffee((-1), 1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("");
    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException3 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("hi!");
    java.lang.Throwable[] throwable_array4 = recipeException3.getSuppressed();
    inventoryException1.addSuppressed((java.lang.Throwable)recipeException3);
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException7 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    java.lang.Throwable[] throwable_array8 = inventoryException7.getSuppressed();
    recipeException3.addSuppressed((java.lang.Throwable)inventoryException7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array8);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addChocolate("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory1 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory1.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = inventory1.useIngredients(recipe7);
    java.lang.String str12 = recipe7.getName();
    boolean b13 = recipeBook0.addRecipe(recipe7);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook15 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str17 = recipeBook15.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array18 = recipeBook15.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook19 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str21 = recipeBook19.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe22 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b23 = recipeBook19.addRecipe(recipe22);
    int i24 = recipe22.getAmtCoffee();
    int i25 = recipe22.getAmtCoffee();
    boolean b26 = recipeBook15.addRecipe(recipe22);
    recipe22.setName("hi!");
    recipe22.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str31 = recipeBook0.editRecipe((int)(short)100, recipe22);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n", "", "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ", "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    inventory0.setChocolate(100);
    inventory0.setChocolate(15);
    inventory0.setCoffee((int)'a');

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    int i5 = inventory0.getChocolate();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker6 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker7 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe9 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str10 = coffeeMaker7.editRecipe(0, recipe9);
    edu.ncsu.csc326.coffeemaker.Inventory inventory11 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i12 = inventory11.getMilk();
    int i13 = inventory11.getCoffee();
    inventory11.setChocolate((int)(byte)-1);
    inventory11.setCoffee((int)(byte)10);
    int i18 = inventory11.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe19 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b20 = inventory11.useIngredients(recipe19);
    boolean b21 = coffeeMaker7.addRecipe(recipe19);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i24 = recipe23.getPrice();
    int i25 = recipe23.getAmtChocolate();
    java.lang.String str26 = coffeeMaker7.editRecipe(0, recipe23);
    boolean b27 = coffeeMaker6.addRecipe(recipe23);
    int i28 = recipe23.getAmtSugar();
    boolean b29 = inventory0.useIngredients(recipe23);
    int i30 = recipe23.getAmtSugar();
    // The following exception was thrown during execution in test generation
    try {
    recipe23.setAmtMilk("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: ", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!", "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("");
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException3 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    java.lang.Throwable[] throwable_array4 = inventoryException3.getSuppressed();
    inventoryException1.addSuppressed((java.lang.Throwable)inventoryException3);
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException7 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("");
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException9 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    java.lang.String str10 = inventoryException9.toString();
    inventoryException7.addSuppressed((java.lang.Throwable)inventoryException9);
    inventoryException1.addSuppressed((java.lang.Throwable)inventoryException7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"+ "'", str10.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"));

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = recipe6.getPrice();
    // The following exception was thrown during execution in test generation
    try {
    recipe6.setAmtMilk("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    java.lang.String str10 = inventory0.toString();
    inventory0.setMilk((int)(short)0);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addChocolate("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str10.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(short)1);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: ", "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ", "");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    // The following exception was thrown during execution in test generation
    try {
    int i3 = coffeeMaker0.makeCoffee((int)(short)100, (int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    int i4 = recipe2.getPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    // The following exception was thrown during execution in test generation
    try {
    recipe6.setAmtChocolate("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook16 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str18 = recipeBook16.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array19 = recipeBook16.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    int i26 = recipe23.getAmtCoffee();
    boolean b27 = recipeBook16.addRecipe(recipe23);
    recipe23.setName("hi!");
    recipe23.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    boolean b32 = coffeeMaker0.addRecipe(recipe23);
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("hi!", "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n", "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n", "");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    inventory0.setMilk(10);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    recipe3.setName("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    // The following exception was thrown during execution in test generation
    try {
    recipe3.setAmtCoffee("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    int i23 = recipe17.getAmtChocolate();
    // The following exception was thrown during execution in test generation
    try {
    recipe17.setPrice("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook16 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str18 = recipeBook16.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array19 = recipeBook16.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    int i26 = recipe23.getAmtCoffee();
    boolean b27 = recipeBook16.addRecipe(recipe23);
    recipe23.setName("hi!");
    recipe23.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    boolean b32 = coffeeMaker0.addRecipe(recipe23);
    edu.ncsu.csc326.coffeemaker.Recipe recipe33 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i34 = recipe33.getPrice();
    java.lang.String str35 = recipe33.toString();
    boolean b36 = coffeeMaker0.addRecipe(recipe33);
    // The following exception was thrown during execution in test generation
    try {
    recipe33.setAmtSugar("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory4.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook7 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str9 = recipeBook7.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe10 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b11 = recipeBook7.addRecipe(recipe10);
    int i12 = recipe10.getAmtCoffee();
    int i13 = recipe10.getAmtCoffee();
    boolean b14 = inventory4.useIngredients(recipe10);
    java.lang.String str15 = recipe10.getName();
    boolean b16 = recipeBook3.addRecipe(recipe10);
    boolean b17 = recipeBook0.addRecipe(recipe10);
    // The following exception was thrown during execution in test generation
    try {
    recipe10.setPrice("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    edu.ncsu.csc326.coffeemaker.Inventory inventory16 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i17 = inventory16.getMilk();
    int i18 = inventory16.getSugar();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker19 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str22 = coffeeMaker19.editRecipe(0, recipe21);
    edu.ncsu.csc326.coffeemaker.Inventory inventory23 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i24 = inventory23.getMilk();
    int i25 = inventory23.getCoffee();
    inventory23.setChocolate((int)(byte)-1);
    inventory23.setCoffee((int)(byte)10);
    int i30 = inventory23.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe31 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b32 = inventory23.useIngredients(recipe31);
    boolean b33 = coffeeMaker19.addRecipe(recipe31);
    java.lang.String str34 = coffeeMaker19.checkInventory();
    java.lang.String str35 = coffeeMaker19.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook36 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory37 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory37.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook40 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str42 = recipeBook40.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe43 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b44 = recipeBook40.addRecipe(recipe43);
    int i45 = recipe43.getAmtCoffee();
    int i46 = recipe43.getAmtCoffee();
    boolean b47 = inventory37.useIngredients(recipe43);
    java.lang.String str48 = recipe43.getName();
    boolean b49 = recipeBook36.addRecipe(recipe43);
    boolean b50 = coffeeMaker19.addRecipe(recipe43);
    recipe43.setName("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
    boolean b53 = inventory16.useIngredients(recipe43);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str54 = coffeeMaker0.editRecipe(100, recipe43);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str34.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str35.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + ""+ "'", str48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    java.lang.String str11 = recipe6.getName();
    // The following exception was thrown during execution in test generation
    try {
    recipe6.setAmtSugar("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i4 = recipe3.getPrice();
    int i5 = recipe3.getAmtChocolate();
    int i6 = recipe3.getAmtCoffee();
    int i7 = recipe3.getPrice();
    boolean b8 = inventory0.useIngredients(recipe3);
    // The following exception was thrown during execution in test generation
    try {
    recipe3.setAmtSugar("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setMilk((-1));
    inventory0.setSugar(100);
    inventory0.setCoffee(0);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    int i5 = recipe3.getAmtCoffee();
    int i6 = recipe3.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    recipe3.setAmtCoffee("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    int i5 = recipe3.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    recipe3.setPrice("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory4.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook7 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str9 = recipeBook7.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe10 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b11 = recipeBook7.addRecipe(recipe10);
    int i12 = recipe10.getAmtCoffee();
    int i13 = recipe10.getAmtCoffee();
    boolean b14 = inventory4.useIngredients(recipe10);
    java.lang.String str15 = recipe10.getName();
    boolean b16 = recipeBook3.addRecipe(recipe10);
    boolean b17 = recipeBook0.addRecipe(recipe10);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker18 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker19 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str22 = coffeeMaker19.editRecipe(0, recipe21);
    edu.ncsu.csc326.coffeemaker.Inventory inventory23 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i24 = inventory23.getMilk();
    int i25 = inventory23.getCoffee();
    inventory23.setChocolate((int)(byte)-1);
    inventory23.setCoffee((int)(byte)10);
    int i30 = inventory23.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe31 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b32 = inventory23.useIngredients(recipe31);
    boolean b33 = coffeeMaker19.addRecipe(recipe31);
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i36 = recipe35.getPrice();
    int i37 = recipe35.getAmtChocolate();
    java.lang.String str38 = coffeeMaker19.editRecipe(0, recipe35);
    boolean b39 = coffeeMaker18.addRecipe(recipe35);
    int i40 = recipe35.getAmtSugar();
    recipe35.setName("");
    boolean b44 = recipe35.equals((java.lang.Object)(-1));
    boolean b45 = recipeBook0.addRecipe(recipe35);
    // The following exception was thrown during execution in test generation
    try {
    recipe35.setAmtCoffee("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    java.lang.String str6 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = null;
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = recipeBook0.editRecipe((int)(short)0, recipe8);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory5.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook8 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str10 = recipeBook8.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe11 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b12 = recipeBook8.addRecipe(recipe11);
    int i13 = recipe11.getAmtCoffee();
    int i14 = recipe11.getAmtCoffee();
    boolean b15 = inventory5.useIngredients(recipe11);
    java.lang.String str16 = recipe11.getName();
    java.lang.String str17 = recipeBook0.editRecipe((int)(short)0, recipe11);
    // The following exception was thrown during execution in test generation
    try {
    recipe11.setPrice("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe1 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i2 = recipe1.getPrice();
    int i3 = recipe1.getAmtChocolate();
    int i4 = recipe1.getAmtCoffee();
    boolean b5 = coffeeMaker0.addRecipe(recipe1);
    // The following exception was thrown during execution in test generation
    try {
    recipe1.setAmtCoffee("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i1 = recipe0.getPrice();
    java.lang.String str2 = recipe0.toString();
    int i3 = recipe0.getPrice();
    int i4 = recipe0.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    recipe0.setAmtChocolate("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    java.lang.String str6 = recipeBook0.deleteRecipe((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getCoffee();
    int i2 = inventory0.getChocolate();
    inventory0.setCoffee((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    java.lang.String str10 = inventory0.toString();
    inventory0.setMilk((int)(short)0);
    inventory0.setCoffee((int)(short)10);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addChocolate("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str10.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = recipeBook0.addRecipe(recipe7);
    recipe7.setName("hi!");
    recipe7.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    int i16 = recipe7.getAmtCoffee();
    int i17 = recipe7.getPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setMilk((-1));
    int i3 = inventory0.getChocolate();
    int i4 = inventory0.getMilk();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addSugar("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 15);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    int i10 = inventory0.getCoffee();
    int i11 = inventory0.getChocolate();
    inventory0.setCoffee((int)' ');
    java.lang.String str14 = inventory0.toString();
    edu.ncsu.csc326.coffeemaker.Recipe recipe15 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b16 = inventory0.useIngredients(recipe15);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str14.equals("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory1 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory1.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = inventory1.useIngredients(recipe7);
    java.lang.String str12 = recipe7.getName();
    boolean b13 = recipeBook0.addRecipe(recipe7);
    int i14 = recipe7.getAmtChocolate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i4 = recipe3.getPrice();
    int i5 = recipe3.getAmtChocolate();
    int i6 = recipe3.getAmtCoffee();
    int i7 = recipe3.getPrice();
    boolean b8 = inventory0.useIngredients(recipe3);
    int i9 = inventory0.getSugar();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 15);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    java.lang.String str2 = inventoryException1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str2.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    int i23 = recipe17.getAmtChocolate();
    int i24 = recipe17.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    recipe17.setAmtChocolate("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    int i5 = inventory0.getChocolate();
    int i6 = inventory0.getSugar();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    edu.ncsu.csc326.coffeemaker.Recipe recipe16 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i17 = recipe16.getPrice();
    int i18 = recipe16.getAmtChocolate();
    java.lang.String str19 = coffeeMaker0.editRecipe(0, recipe16);
    java.lang.String str20 = coffeeMaker0.checkInventory();
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!", "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n", "Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n", "");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str20.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = inventory0.getChocolate();
    java.lang.String str11 = inventory0.toString();
    int i12 = inventory0.getCoffee();
    java.lang.String str13 = inventory0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str11.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str13.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getSugar();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = inventory0.getChocolate();
    java.lang.String str11 = inventory0.toString();
    int i12 = inventory0.getCoffee();
    inventory0.setCoffee((int)'4');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str11.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory4.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook7 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str9 = recipeBook7.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe10 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b11 = recipeBook7.addRecipe(recipe10);
    int i12 = recipe10.getAmtCoffee();
    int i13 = recipe10.getAmtCoffee();
    boolean b14 = inventory4.useIngredients(recipe10);
    java.lang.String str15 = recipe10.getName();
    boolean b16 = recipeBook3.addRecipe(recipe10);
    boolean b17 = recipeBook0.addRecipe(recipe10);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker18 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker19 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str22 = coffeeMaker19.editRecipe(0, recipe21);
    edu.ncsu.csc326.coffeemaker.Inventory inventory23 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i24 = inventory23.getMilk();
    int i25 = inventory23.getCoffee();
    inventory23.setChocolate((int)(byte)-1);
    inventory23.setCoffee((int)(byte)10);
    int i30 = inventory23.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe31 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b32 = inventory23.useIngredients(recipe31);
    boolean b33 = coffeeMaker19.addRecipe(recipe31);
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i36 = recipe35.getPrice();
    int i37 = recipe35.getAmtChocolate();
    java.lang.String str38 = coffeeMaker19.editRecipe(0, recipe35);
    boolean b39 = coffeeMaker18.addRecipe(recipe35);
    int i40 = recipe35.getAmtSugar();
    recipe35.setName("");
    boolean b44 = recipe35.equals((java.lang.Object)(-1));
    boolean b45 = recipeBook0.addRecipe(recipe35);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook46 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str48 = recipeBook46.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe49 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b50 = recipeBook46.addRecipe(recipe49);
    recipe49.setName("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    boolean b53 = recipeBook0.addRecipe(recipe49);
    // The following exception was thrown during execution in test generation
    try {
    recipe49.setAmtCoffee("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory4.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook7 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str9 = recipeBook7.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe10 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b11 = recipeBook7.addRecipe(recipe10);
    int i12 = recipe10.getAmtCoffee();
    int i13 = recipe10.getAmtCoffee();
    boolean b14 = inventory4.useIngredients(recipe10);
    java.lang.String str15 = recipe10.getName();
    boolean b16 = recipeBook3.addRecipe(recipe10);
    boolean b17 = recipeBook0.addRecipe(recipe10);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker18 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker19 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str22 = coffeeMaker19.editRecipe(0, recipe21);
    edu.ncsu.csc326.coffeemaker.Inventory inventory23 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i24 = inventory23.getMilk();
    int i25 = inventory23.getCoffee();
    inventory23.setChocolate((int)(byte)-1);
    inventory23.setCoffee((int)(byte)10);
    int i30 = inventory23.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe31 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b32 = inventory23.useIngredients(recipe31);
    boolean b33 = coffeeMaker19.addRecipe(recipe31);
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i36 = recipe35.getPrice();
    int i37 = recipe35.getAmtChocolate();
    java.lang.String str38 = coffeeMaker19.editRecipe(0, recipe35);
    boolean b39 = coffeeMaker18.addRecipe(recipe35);
    int i40 = recipe35.getAmtSugar();
    recipe35.setName("");
    boolean b44 = recipe35.equals((java.lang.Object)(-1));
    boolean b45 = recipeBook0.addRecipe(recipe35);
    edu.ncsu.csc326.coffeemaker.Inventory inventory46 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i47 = inventory46.getMilk();
    int i48 = inventory46.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe49 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i50 = recipe49.getPrice();
    int i51 = recipe49.getAmtChocolate();
    int i52 = recipe49.getAmtCoffee();
    int i53 = recipe49.getPrice();
    boolean b54 = inventory46.useIngredients(recipe49);
    boolean b55 = recipe35.equals((java.lang.Object)b54);
    // The following exception was thrown during execution in test generation
    try {
    recipe35.setAmtMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i4 = recipe3.getPrice();
    int i5 = recipe3.getAmtChocolate();
    int i6 = recipe3.getAmtCoffee();
    int i7 = recipe3.getPrice();
    boolean b8 = inventory0.useIngredients(recipe3);
    int i9 = recipe3.getPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    recipe17.setName("");
    // The following exception was thrown during execution in test generation
    try {
    recipe17.setAmtCoffee("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe4 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i5 = recipe4.getPrice();
    int i6 = recipe4.getAmtChocolate();
    java.lang.String str7 = recipeBook0.editRecipe(0, recipe4);
    // The following exception was thrown during execution in test generation
    try {
    recipe4.setAmtSugar("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Recipe recipe4 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b5 = recipeBook0.addRecipe(recipe4);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i8 = recipe7.getPrice();
    int i9 = recipe7.getAmtChocolate();
    int i10 = recipe7.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str11 = recipeBook0.editRecipe(32, recipe7);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(short)1);
    int i5 = inventory0.getCoffee();
    java.lang.String str6 = inventory0.toString();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n"+ "'", str6.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n"));

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Recipe recipe4 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i5 = recipe4.getPrice();
    java.lang.String str6 = recipe4.toString();
    boolean b7 = recipeBook0.addRecipe(recipe4);
    edu.ncsu.csc326.coffeemaker.Inventory inventory8 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i9 = inventory8.getMilk();
    int i10 = inventory8.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook11 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str13 = recipeBook11.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe14 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b15 = recipeBook11.addRecipe(recipe14);
    int i16 = recipe14.getAmtCoffee();
    boolean b17 = inventory8.useIngredients(recipe14);
    boolean b18 = recipeBook0.addRecipe(recipe14);
    // The following exception was thrown during execution in test generation
    try {
    recipe14.setPrice("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    java.lang.String str5 = recipeBook0.deleteRecipe((int)(short)0);
    edu.ncsu.csc326.coffeemaker.Inventory inventory7 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory7.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook10 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str12 = recipeBook10.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = recipeBook10.addRecipe(recipe13);
    int i15 = recipe13.getAmtCoffee();
    int i16 = recipe13.getAmtCoffee();
    boolean b17 = inventory7.useIngredients(recipe13);
    int i18 = recipe13.getAmtChocolate();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str19 = recipeBook0.editRecipe(15, recipe13);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    // The following exception was thrown during execution in test generation
    try {
    recipe2.setAmtCoffee("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    // The following exception was thrown during execution in test generation
    try {
    recipe3.setAmtChocolate("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i1 = recipe0.getPrice();
    java.lang.String str2 = recipe0.toString();
    int i3 = recipe0.getPrice();
    int i4 = recipe0.getAmtChocolate();
    // The following exception was thrown during execution in test generation
    try {
    recipe0.setAmtSugar("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    java.lang.String str3 = inventory0.toString();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str3.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array5 = recipeBook0.getRecipes();
    java.lang.String str7 = recipeBook0.deleteRecipe((int)(short)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array8 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker10 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str13 = coffeeMaker10.editRecipe(0, recipe12);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str14 = recipeBook0.editRecipe((int)(byte)10, recipe12);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook17 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory18.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook21 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str23 = recipeBook21.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe24 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b25 = recipeBook21.addRecipe(recipe24);
    int i26 = recipe24.getAmtCoffee();
    int i27 = recipe24.getAmtCoffee();
    boolean b28 = inventory18.useIngredients(recipe24);
    java.lang.String str29 = recipe24.getName();
    boolean b30 = recipeBook17.addRecipe(recipe24);
    boolean b31 = coffeeMaker0.addRecipe(recipe24);
    recipe24.setName("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
    // The following exception was thrown during execution in test generation
    try {
    recipe24.setAmtMilk("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array1 = recipeBook0.getRecipes();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str3 = recipeBook0.deleteRecipe((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array1);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = recipeBook0.addRecipe(recipe7);
    recipe7.setName("hi!");
    java.lang.String str14 = recipe7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = recipeBook0.addRecipe(recipe7);
    recipe7.setName("hi!");
    recipe7.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    int i16 = recipe7.getPrice();
    // The following exception was thrown during execution in test generation
    try {
    recipe7.setAmtCoffee("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array5 = recipeBook0.getRecipes();
    java.lang.String str7 = recipeBook0.deleteRecipe((int)(short)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array8 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array9 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker11 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker12 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe14 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str15 = coffeeMaker12.editRecipe(0, recipe14);
    edu.ncsu.csc326.coffeemaker.Inventory inventory16 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i17 = inventory16.getMilk();
    int i18 = inventory16.getCoffee();
    inventory16.setChocolate((int)(byte)-1);
    inventory16.setCoffee((int)(byte)10);
    int i23 = inventory16.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe24 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b25 = inventory16.useIngredients(recipe24);
    boolean b26 = coffeeMaker12.addRecipe(recipe24);
    edu.ncsu.csc326.coffeemaker.Recipe recipe28 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i29 = recipe28.getPrice();
    int i30 = recipe28.getAmtChocolate();
    java.lang.String str31 = coffeeMaker12.editRecipe(0, recipe28);
    boolean b32 = coffeeMaker11.addRecipe(recipe28);
    int i33 = recipe28.getAmtSugar();
    int i34 = recipe28.getAmtChocolate();
    int i35 = recipe28.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str36 = recipeBook0.editRecipe((int)(short)-1, recipe28);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array15 = coffeeMaker0.getRecipes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array15);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    int i5 = inventory0.getChocolate();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker6 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker7 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe9 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str10 = coffeeMaker7.editRecipe(0, recipe9);
    edu.ncsu.csc326.coffeemaker.Inventory inventory11 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i12 = inventory11.getMilk();
    int i13 = inventory11.getCoffee();
    inventory11.setChocolate((int)(byte)-1);
    inventory11.setCoffee((int)(byte)10);
    int i18 = inventory11.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe19 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b20 = inventory11.useIngredients(recipe19);
    boolean b21 = coffeeMaker7.addRecipe(recipe19);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i24 = recipe23.getPrice();
    int i25 = recipe23.getAmtChocolate();
    java.lang.String str26 = coffeeMaker7.editRecipe(0, recipe23);
    boolean b27 = coffeeMaker6.addRecipe(recipe23);
    int i28 = recipe23.getAmtSugar();
    boolean b29 = inventory0.useIngredients(recipe23);
    // The following exception was thrown during execution in test generation
    try {
    recipe23.setPrice("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    recipe3.setName("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    int i7 = recipe3.getPrice();
    int i8 = recipe3.getAmtChocolate();
    // The following exception was thrown during execution in test generation
    try {
    recipe3.setAmtCoffee("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    java.lang.String str2 = inventoryException1.toString();
    java.lang.Throwable[] throwable_array3 = inventoryException1.getSuppressed();
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException5 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("");
    java.lang.Throwable[] throwable_array6 = inventoryException5.getSuppressed();
    inventoryException1.addSuppressed((java.lang.Throwable)inventoryException5);
    java.lang.String str8 = inventoryException1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"+ "'", str2.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"+ "'", str8.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"));

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    java.lang.String str22 = coffeeMaker0.checkInventory();
    java.lang.String str23 = coffeeMaker0.checkInventory();
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("hi!", "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: ", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str22.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str23.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i8 = recipe7.getPrice();
    int i9 = recipe7.getAmtChocolate();
    java.lang.String str10 = recipeBook3.editRecipe(0, recipe7);
    boolean b11 = recipeBook0.addRecipe(recipe7);
    // The following exception was thrown during execution in test generation
    try {
    recipe7.setAmtCoffee("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setMilk((-1));
    int i3 = inventory0.getMilk();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 15);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    java.lang.String str10 = inventory0.toString();
    inventory0.setChocolate((int)(short)-1);
    int i13 = inventory0.getMilk();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str10.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = recipe6.getPrice();
    // The following exception was thrown during execution in test generation
    try {
    recipe6.setAmtSugar("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = inventory0.getChocolate();
    java.lang.String str11 = inventory0.toString();
    inventory0.setSugar((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str11.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array5 = recipeBook0.getRecipes();
    java.lang.String str7 = recipeBook0.deleteRecipe((int)(short)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array8 = recipeBook0.getRecipes();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str10 = recipeBook0.deleteRecipe(100);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array8);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = recipeBook0.addRecipe(recipe7);
    recipe7.setName("hi!");
    recipe7.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    int i16 = recipe7.getPrice();
    // The following exception was thrown during execution in test generation
    try {
    recipe7.setAmtCoffee("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setMilk((-1));
    inventory0.setSugar(100);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addChocolate("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    java.lang.String str22 = coffeeMaker0.checkInventory();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str24 = coffeeMaker0.deleteRecipe((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str22.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    recipe17.setName("");
    boolean b26 = recipe17.equals((java.lang.Object)(-1));
    int i27 = recipe17.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    recipe17.setAmtMilk("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    int i5 = inventory0.getChocolate();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker6 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker7 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe9 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str10 = coffeeMaker7.editRecipe(0, recipe9);
    edu.ncsu.csc326.coffeemaker.Inventory inventory11 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i12 = inventory11.getMilk();
    int i13 = inventory11.getCoffee();
    inventory11.setChocolate((int)(byte)-1);
    inventory11.setCoffee((int)(byte)10);
    int i18 = inventory11.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe19 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b20 = inventory11.useIngredients(recipe19);
    boolean b21 = coffeeMaker7.addRecipe(recipe19);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i24 = recipe23.getPrice();
    int i25 = recipe23.getAmtChocolate();
    java.lang.String str26 = coffeeMaker7.editRecipe(0, recipe23);
    boolean b27 = coffeeMaker6.addRecipe(recipe23);
    int i28 = recipe23.getAmtSugar();
    boolean b29 = inventory0.useIngredients(recipe23);
    // The following exception was thrown during execution in test generation
    try {
    recipe23.setPrice("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    int i5 = recipe3.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory6 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i7 = inventory6.getMilk();
    int i8 = inventory6.getCoffee();
    inventory6.setChocolate((int)(byte)-1);
    int i11 = inventory6.getChocolate();
    boolean b12 = recipe3.equals((java.lang.Object)inventory6);
    // The following exception was thrown during execution in test generation
    try {
    inventory6.addSugar("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Recipe recipe4 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i5 = recipe4.getPrice();
    java.lang.String str6 = recipe4.toString();
    boolean b7 = recipeBook0.addRecipe(recipe4);
    edu.ncsu.csc326.coffeemaker.Inventory inventory8 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i9 = inventory8.getMilk();
    int i10 = inventory8.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook11 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str13 = recipeBook11.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe14 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b15 = recipeBook11.addRecipe(recipe14);
    int i16 = recipe14.getAmtCoffee();
    boolean b17 = inventory8.useIngredients(recipe14);
    boolean b18 = recipeBook0.addRecipe(recipe14);
    // The following exception was thrown during execution in test generation
    try {
    recipe14.setAmtChocolate("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    inventory0.setCoffee(1);
    inventory0.setCoffee((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addSugar("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    java.lang.String str10 = inventory0.toString();
    inventory0.setMilk((int)(short)0);
    inventory0.setCoffee((int)(short)10);
    int i15 = inventory0.getChocolate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str10.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 15);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    java.lang.String str4 = recipe2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + ""+ "'", str4.equals(""));

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setMilk((-1));
    int i3 = inventory0.getChocolate();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 15);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = inventory0.getChocolate();
    java.lang.String str11 = inventory0.toString();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook12 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str14 = recipeBook12.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe15 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b16 = recipeBook12.addRecipe(recipe15);
    int i17 = recipe15.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i19 = inventory18.getMilk();
    int i20 = inventory18.getCoffee();
    inventory18.setChocolate((int)(byte)-1);
    int i23 = inventory18.getChocolate();
    boolean b24 = recipe15.equals((java.lang.Object)inventory18);
    boolean b25 = inventory0.useIngredients(recipe15);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addSugar("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str11.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    int i11 = recipe6.getAmtChocolate();
    int i12 = recipe6.getAmtCoffee();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    int i23 = recipe17.getAmtSugar();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook24 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str26 = recipeBook24.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook27 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory28 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory28.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook31 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str33 = recipeBook31.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe34 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b35 = recipeBook31.addRecipe(recipe34);
    int i36 = recipe34.getAmtCoffee();
    int i37 = recipe34.getAmtCoffee();
    boolean b38 = inventory28.useIngredients(recipe34);
    java.lang.String str39 = recipe34.getName();
    boolean b40 = recipeBook27.addRecipe(recipe34);
    boolean b41 = recipeBook24.addRecipe(recipe34);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker42 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker43 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe45 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str46 = coffeeMaker43.editRecipe(0, recipe45);
    edu.ncsu.csc326.coffeemaker.Inventory inventory47 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i48 = inventory47.getMilk();
    int i49 = inventory47.getCoffee();
    inventory47.setChocolate((int)(byte)-1);
    inventory47.setCoffee((int)(byte)10);
    int i54 = inventory47.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe55 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b56 = inventory47.useIngredients(recipe55);
    boolean b57 = coffeeMaker43.addRecipe(recipe55);
    edu.ncsu.csc326.coffeemaker.Recipe recipe59 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i60 = recipe59.getPrice();
    int i61 = recipe59.getAmtChocolate();
    java.lang.String str62 = coffeeMaker43.editRecipe(0, recipe59);
    boolean b63 = coffeeMaker42.addRecipe(recipe59);
    int i64 = recipe59.getAmtSugar();
    recipe59.setName("");
    boolean b68 = recipe59.equals((java.lang.Object)(-1));
    boolean b69 = recipeBook24.addRecipe(recipe59);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook70 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str72 = recipeBook70.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe73 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b74 = recipeBook70.addRecipe(recipe73);
    recipe73.setName("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    boolean b77 = recipeBook24.addRecipe(recipe73);
    boolean b78 = recipe17.equals((java.lang.Object)recipe73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + ""+ "'", str39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + ""+ "'", str62.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setMilk((-1));
    int i3 = inventory0.getMilk();
    int i4 = inventory0.getMilk();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 15);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = inventory0.getCoffee();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    inventory0.setChocolate(100);
    inventory0.setChocolate((int)(short)0);
    int i7 = inventory0.getChocolate();
    int i8 = inventory0.getSugar();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addChocolate("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("hi!");
    java.lang.String str2 = recipeException1.toString();
    java.lang.Throwable[] throwable_array3 = recipeException1.getSuppressed();
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException5 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("");
    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException7 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("hi!");
    java.lang.Throwable[] throwable_array8 = recipeException7.getSuppressed();
    inventoryException5.addSuppressed((java.lang.Throwable)recipeException7);
    java.lang.String str10 = inventoryException5.toString();
    recipeException1.addSuppressed((java.lang.Throwable)inventoryException5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!"+ "'", str2.equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: "+ "'", str10.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: "));

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n");

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str17 = coffeeMaker0.deleteRecipe((int)(byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + ""+ "'", str17.equals(""));

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    inventory0.setChocolate(100);
    inventory0.setChocolate((int)(short)0);
    inventory0.setSugar(1);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i1 = recipe0.getPrice();
    int i2 = recipe0.getAmtChocolate();
    // The following exception was thrown during execution in test generation
    try {
    recipe0.setAmtSugar("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    int i5 = inventory0.getChocolate();
    int i6 = inventory0.getSugar();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addSugar("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n", "", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: ", "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    int i23 = recipe17.getAmtChocolate();
    int i24 = recipe17.getAmtCoffee();
    int i25 = recipe17.getAmtCoffee();
    int i26 = recipe17.getPrice();
    int i27 = recipe17.getAmtChocolate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array5 = recipeBook0.getRecipes();
    java.lang.String str7 = recipeBook0.deleteRecipe((int)(short)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array8 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array9 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook11 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str13 = recipeBook11.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array14 = recipeBook11.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook15 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str17 = recipeBook15.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe18 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b19 = recipeBook15.addRecipe(recipe18);
    int i20 = recipe18.getAmtCoffee();
    int i21 = recipe18.getAmtCoffee();
    boolean b22 = recipeBook11.addRecipe(recipe18);
    recipe18.setName("hi!");
    recipe18.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    java.lang.String str27 = recipeBook0.editRecipe((int)(short)0, recipe18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = inventory0.getChocolate();
    java.lang.String str11 = inventory0.toString();
    int i12 = inventory0.getCoffee();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addSugar("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str11.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook17 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory18.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook21 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str23 = recipeBook21.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe24 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b25 = recipeBook21.addRecipe(recipe24);
    int i26 = recipe24.getAmtCoffee();
    int i27 = recipe24.getAmtCoffee();
    boolean b28 = inventory18.useIngredients(recipe24);
    java.lang.String str29 = recipe24.getName();
    boolean b30 = recipeBook17.addRecipe(recipe24);
    boolean b31 = coffeeMaker0.addRecipe(recipe24);
    java.lang.String str32 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook34 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str36 = recipeBook34.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe37 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b38 = recipeBook34.addRecipe(recipe37);
    recipe37.setName("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    int i41 = recipe37.getPrice();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str42 = coffeeMaker0.editRecipe((int)'a', recipe37);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str32.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    int i5 = recipe3.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory6 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i7 = inventory6.getMilk();
    int i8 = inventory6.getCoffee();
    inventory6.setChocolate((int)(byte)-1);
    int i11 = inventory6.getChocolate();
    boolean b12 = recipe3.equals((java.lang.Object)inventory6);
    int i13 = recipe3.getPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    // The following exception was thrown during execution in test generation
    try {
    int i19 = coffeeMaker0.makeCoffee(15, (int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    int i10 = inventory0.getCoffee();
    int i11 = inventory0.getChocolate();
    inventory0.setCoffee((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = inventory0.getChocolate();
    java.lang.String str11 = inventory0.toString();
    int i12 = inventory0.getSugar();
    int i13 = inventory0.getChocolate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str11.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    recipe17.setName("");
    java.lang.String str25 = recipe17.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    edu.ncsu.csc326.coffeemaker.Recipe recipe16 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i17 = recipe16.getPrice();
    int i18 = recipe16.getAmtChocolate();
    java.lang.String str19 = coffeeMaker0.editRecipe(0, recipe16);
    java.lang.String str20 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array21 = coffeeMaker0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array22 = coffeeMaker0.getRecipes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str20.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array22);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    java.lang.String str2 = inventory0.toString();
    java.lang.String str3 = inventory0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str2.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str3.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    inventory0.setCoffee(1);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException3 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    inventoryException1.addSuppressed((java.lang.Throwable)inventoryException3);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("");
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException3 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    java.lang.String str4 = inventoryException3.toString();
    inventoryException1.addSuppressed((java.lang.Throwable)inventoryException3);
    java.lang.String str6 = inventoryException1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"+ "'", str4.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: "+ "'", str6.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: "));

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setMilk((-1));
    int i3 = inventory0.getMilk();
    inventory0.setMilk((int)'#');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 15);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    int i3 = inventory0.getMilk();
    edu.ncsu.csc326.coffeemaker.Recipe recipe4 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i5 = recipe4.getPrice();
    java.lang.String str6 = recipe4.toString();
    boolean b7 = inventory0.useIngredients(recipe4);
    // The following exception was thrown during execution in test generation
    try {
    recipe4.setAmtSugar("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array5 = recipeBook0.getRecipes();
    java.lang.String str7 = recipeBook0.deleteRecipe((int)(short)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array8 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array9 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook11 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str13 = recipeBook11.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe14 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b15 = recipeBook11.addRecipe(recipe14);
    recipe14.setName("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    int i18 = recipe14.getPrice();
    int i19 = recipe14.getAmtChocolate();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str20 = recipeBook0.editRecipe((int)'#', recipe14);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    java.lang.String str22 = coffeeMaker0.checkInventory();
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("", "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n", "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str22.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("");
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException3 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    java.lang.String str4 = inventoryException3.toString();
    inventoryException1.addSuppressed((java.lang.Throwable)inventoryException3);
    java.lang.String str6 = inventoryException3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"+ "'", str4.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"+ "'", str6.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"));

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Recipe recipe4 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i5 = recipe4.getPrice();
    java.lang.String str6 = recipe4.toString();
    boolean b7 = recipeBook0.addRecipe(recipe4);
    // The following exception was thrown during execution in test generation
    try {
    recipe4.setPrice("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("");
    java.lang.Throwable[] throwable_array2 = recipeException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array2);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n", "Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n", "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i1 = recipe0.getPrice();
    int i2 = recipe0.getAmtChocolate();
    java.lang.String str3 = recipe0.getName();
    // The following exception was thrown during execution in test generation
    try {
    recipe0.setAmtSugar("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + ""+ "'", str3.equals(""));

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = recipe6.getAmtCoffee();
    java.lang.String str11 = recipe6.toString();
    int i12 = recipe6.getPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getSugar();
    int i8 = inventory0.getChocolate();
    int i9 = inventory0.getCoffee();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 10);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    recipe3.setName("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    int i7 = recipe3.getPrice();
    int i8 = recipe3.getAmtChocolate();
    java.lang.String str9 = recipe3.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"+ "'", str9.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"));

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    inventory0.setChocolate(100);
    inventory0.setChocolate((int)(short)0);
    int i7 = inventory0.getChocolate();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    java.lang.String str1 = coffeeMaker0.checkInventory();
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!", "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str1.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    int i3 = inventory0.getMilk();
    edu.ncsu.csc326.coffeemaker.Recipe recipe4 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i5 = recipe4.getPrice();
    java.lang.String str6 = recipe4.toString();
    boolean b7 = inventory0.useIngredients(recipe4);
    java.lang.String str8 = recipe4.getName();
    int i9 = recipe4.getAmtSugar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe1 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i2 = recipe1.getPrice();
    int i3 = recipe1.getAmtChocolate();
    int i4 = recipe1.getAmtCoffee();
    boolean b5 = coffeeMaker0.addRecipe(recipe1);
    recipe1.setName("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    // The following exception was thrown during execution in test generation
    try {
    recipe1.setPrice("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.Inventory inventory17 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i18 = inventory17.getMilk();
    int i19 = inventory17.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    boolean b26 = inventory17.useIngredients(recipe23);
    int i27 = recipe23.getPrice();
    boolean b28 = coffeeMaker0.addRecipe(recipe23);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook30 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str32 = recipeBook30.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array33 = recipeBook30.getRecipes();
    edu.ncsu.csc326.coffeemaker.Inventory inventory35 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory35.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook38 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str40 = recipeBook38.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe41 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b42 = recipeBook38.addRecipe(recipe41);
    int i43 = recipe41.getAmtCoffee();
    int i44 = recipe41.getAmtCoffee();
    boolean b45 = inventory35.useIngredients(recipe41);
    java.lang.String str46 = recipe41.getName();
    java.lang.String str47 = recipeBook30.editRecipe((int)(short)0, recipe41);
    int i48 = recipe41.getAmtMilk();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str49 = coffeeMaker0.editRecipe(10, recipe41);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory4.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook7 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str9 = recipeBook7.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe10 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b11 = recipeBook7.addRecipe(recipe10);
    int i12 = recipe10.getAmtCoffee();
    int i13 = recipe10.getAmtCoffee();
    boolean b14 = inventory4.useIngredients(recipe10);
    java.lang.String str15 = recipe10.getName();
    boolean b16 = recipeBook3.addRecipe(recipe10);
    boolean b17 = recipeBook0.addRecipe(recipe10);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker18 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker19 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str22 = coffeeMaker19.editRecipe(0, recipe21);
    edu.ncsu.csc326.coffeemaker.Inventory inventory23 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i24 = inventory23.getMilk();
    int i25 = inventory23.getCoffee();
    inventory23.setChocolate((int)(byte)-1);
    inventory23.setCoffee((int)(byte)10);
    int i30 = inventory23.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe31 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b32 = inventory23.useIngredients(recipe31);
    boolean b33 = coffeeMaker19.addRecipe(recipe31);
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i36 = recipe35.getPrice();
    int i37 = recipe35.getAmtChocolate();
    java.lang.String str38 = coffeeMaker19.editRecipe(0, recipe35);
    boolean b39 = coffeeMaker18.addRecipe(recipe35);
    int i40 = recipe35.getAmtSugar();
    recipe35.setName("");
    boolean b44 = recipe35.equals((java.lang.Object)(-1));
    boolean b45 = recipeBook0.addRecipe(recipe35);
    edu.ncsu.csc326.coffeemaker.Inventory inventory46 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i47 = inventory46.getMilk();
    int i48 = inventory46.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe49 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i50 = recipe49.getPrice();
    int i51 = recipe49.getAmtChocolate();
    int i52 = recipe49.getAmtCoffee();
    int i53 = recipe49.getPrice();
    boolean b54 = inventory46.useIngredients(recipe49);
    boolean b55 = recipe35.equals((java.lang.Object)b54);
    java.lang.String str56 = recipe35.getName();
    // The following exception was thrown during execution in test generation
    try {
    recipe35.setAmtCoffee("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + ""+ "'", str56.equals(""));

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str16 = coffeeMaker0.deleteRecipe((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    int i5 = recipe3.getAmtCoffee();
    int i6 = recipe3.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    recipe3.setPrice("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("");
    java.lang.String str2 = recipeException1.toString();
    java.lang.Throwable[] throwable_array3 = recipeException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: "+ "'", str2.equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: "));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array3);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory4.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook7 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str9 = recipeBook7.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe10 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b11 = recipeBook7.addRecipe(recipe10);
    int i12 = recipe10.getAmtCoffee();
    int i13 = recipe10.getAmtCoffee();
    boolean b14 = inventory4.useIngredients(recipe10);
    java.lang.String str15 = recipe10.getName();
    boolean b16 = recipeBook3.addRecipe(recipe10);
    boolean b17 = recipeBook0.addRecipe(recipe10);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker18 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker19 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str22 = coffeeMaker19.editRecipe(0, recipe21);
    edu.ncsu.csc326.coffeemaker.Inventory inventory23 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i24 = inventory23.getMilk();
    int i25 = inventory23.getCoffee();
    inventory23.setChocolate((int)(byte)-1);
    inventory23.setCoffee((int)(byte)10);
    int i30 = inventory23.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe31 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b32 = inventory23.useIngredients(recipe31);
    boolean b33 = coffeeMaker19.addRecipe(recipe31);
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i36 = recipe35.getPrice();
    int i37 = recipe35.getAmtChocolate();
    java.lang.String str38 = coffeeMaker19.editRecipe(0, recipe35);
    boolean b39 = coffeeMaker18.addRecipe(recipe35);
    int i40 = recipe35.getAmtSugar();
    recipe35.setName("");
    boolean b44 = recipe35.equals((java.lang.Object)(-1));
    boolean b45 = recipeBook0.addRecipe(recipe35);
    edu.ncsu.csc326.coffeemaker.Inventory inventory46 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i47 = inventory46.getMilk();
    int i48 = inventory46.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe49 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i50 = recipe49.getPrice();
    int i51 = recipe49.getAmtChocolate();
    int i52 = recipe49.getAmtCoffee();
    int i53 = recipe49.getPrice();
    boolean b54 = inventory46.useIngredients(recipe49);
    boolean b55 = recipe35.equals((java.lang.Object)b54);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker56 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker57 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe59 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str60 = coffeeMaker57.editRecipe(0, recipe59);
    edu.ncsu.csc326.coffeemaker.Inventory inventory61 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i62 = inventory61.getMilk();
    int i63 = inventory61.getCoffee();
    inventory61.setChocolate((int)(byte)-1);
    inventory61.setCoffee((int)(byte)10);
    int i68 = inventory61.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe69 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b70 = inventory61.useIngredients(recipe69);
    boolean b71 = coffeeMaker57.addRecipe(recipe69);
    edu.ncsu.csc326.coffeemaker.Recipe recipe73 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i74 = recipe73.getPrice();
    int i75 = recipe73.getAmtChocolate();
    java.lang.String str76 = coffeeMaker57.editRecipe(0, recipe73);
    boolean b77 = coffeeMaker56.addRecipe(recipe73);
    int i78 = recipe73.getAmtSugar();
    int i79 = recipe73.getAmtChocolate();
    boolean b80 = recipe35.equals((java.lang.Object)recipe73);
    java.lang.String str81 = recipe73.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + ""+ "'", str76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + ""+ "'", str81.equals(""));

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Recipe recipe4 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i5 = recipe4.getPrice();
    java.lang.String str6 = recipe4.toString();
    boolean b7 = recipeBook0.addRecipe(recipe4);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = recipeBook0.deleteRecipe(10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: ");

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    // The following exception was thrown during execution in test generation
    try {
    recipe6.setAmtCoffee("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = inventory0.getChocolate();
    inventory0.setSugar(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    int i8 = inventory0.getMilk();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    recipe17.setName("");
    boolean b26 = recipe17.equals((java.lang.Object)(-1));
    int i27 = recipe17.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    recipe17.setAmtCoffee("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    int i23 = recipe17.getAmtChocolate();
    int i24 = recipe17.getAmtCoffee();
    int i25 = recipe17.getAmtCoffee();
    int i26 = recipe17.getPrice();
    // The following exception was thrown during execution in test generation
    try {
    recipe17.setAmtSugar("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    int i10 = inventory0.getCoffee();
    int i11 = inventory0.getChocolate();
    inventory0.setCoffee((int)' ');
    java.lang.String str14 = inventory0.toString();
    inventory0.setCoffee((int)'a');
    inventory0.setCoffee(32);
    int i19 = inventory0.getCoffee();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str14.equals("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 32);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    java.lang.String str10 = inventory0.toString();
    inventory0.setMilk((int)(short)0);
    int i13 = inventory0.getSugar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str10.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    int i10 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook11 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str13 = recipeBook11.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe14 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b15 = recipeBook11.addRecipe(recipe14);
    java.lang.String str16 = recipe14.getName();
    boolean b17 = inventory0.useIngredients(recipe14);
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i19 = inventory18.getMilk();
    int i20 = inventory18.getCoffee();
    inventory18.setChocolate((int)(byte)-1);
    inventory18.setCoffee((int)(byte)10);
    int i25 = inventory18.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe26 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b27 = inventory18.useIngredients(recipe26);
    int i28 = inventory18.getCoffee();
    int i29 = inventory18.getChocolate();
    inventory18.setCoffee((int)' ');
    java.lang.String str32 = inventory18.toString();
    inventory18.setCoffee((int)'a');
    boolean b35 = recipe14.equals((java.lang.Object)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str32.equals("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Recipe recipe4 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i5 = recipe4.getPrice();
    java.lang.String str6 = recipe4.toString();
    boolean b7 = recipeBook0.addRecipe(recipe4);
    edu.ncsu.csc326.coffeemaker.Inventory inventory8 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i9 = inventory8.getMilk();
    int i10 = inventory8.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook11 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str13 = recipeBook11.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe14 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b15 = recipeBook11.addRecipe(recipe14);
    int i16 = recipe14.getAmtCoffee();
    boolean b17 = inventory8.useIngredients(recipe14);
    boolean b18 = recipeBook0.addRecipe(recipe14);
    int i19 = recipe14.getPrice();
    // The following exception was thrown during execution in test generation
    try {
    recipe14.setAmtSugar("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    inventory0.setMilk(10);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker12 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker13 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe15 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str16 = coffeeMaker13.editRecipe(0, recipe15);
    edu.ncsu.csc326.coffeemaker.Inventory inventory17 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i18 = inventory17.getMilk();
    int i19 = inventory17.getCoffee();
    inventory17.setChocolate((int)(byte)-1);
    inventory17.setCoffee((int)(byte)10);
    int i24 = inventory17.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe25 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b26 = inventory17.useIngredients(recipe25);
    boolean b27 = coffeeMaker13.addRecipe(recipe25);
    edu.ncsu.csc326.coffeemaker.Recipe recipe29 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i30 = recipe29.getPrice();
    int i31 = recipe29.getAmtChocolate();
    java.lang.String str32 = coffeeMaker13.editRecipe(0, recipe29);
    boolean b33 = coffeeMaker12.addRecipe(recipe29);
    int i34 = recipe29.getAmtSugar();
    int i35 = recipe29.getAmtSugar();
    boolean b36 = inventory0.useIngredients(recipe29);
    int i37 = inventory0.getSugar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 15);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    edu.ncsu.csc326.coffeemaker.Recipe recipe16 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i17 = recipe16.getPrice();
    int i18 = recipe16.getAmtChocolate();
    java.lang.String str19 = coffeeMaker0.editRecipe(0, recipe16);
    java.lang.String str20 = coffeeMaker0.checkInventory();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str22 = coffeeMaker0.deleteRecipe(10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str20.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str2 = coffeeMaker0.deleteRecipe((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = recipeBook0.addRecipe(recipe7);
    recipe7.setName("hi!");
    java.lang.String str14 = recipe7.toString();
    recipe7.setName("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    inventory0.setChocolate(100);
    inventory0.setChocolate((int)(short)0);
    int i7 = inventory0.getChocolate();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i9 = recipe8.getPrice();
    int i10 = recipe8.getAmtChocolate();
    boolean b11 = inventory0.useIngredients(recipe8);
    // The following exception was thrown during execution in test generation
    try {
    recipe8.setAmtSugar("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe4 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i5 = recipe4.getPrice();
    int i6 = recipe4.getAmtChocolate();
    java.lang.String str7 = recipeBook0.editRecipe(0, recipe4);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array8 = recipeBook0.getRecipes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array8);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    int i5 = inventory0.getChocolate();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker6 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker7 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe9 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str10 = coffeeMaker7.editRecipe(0, recipe9);
    edu.ncsu.csc326.coffeemaker.Inventory inventory11 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i12 = inventory11.getMilk();
    int i13 = inventory11.getCoffee();
    inventory11.setChocolate((int)(byte)-1);
    inventory11.setCoffee((int)(byte)10);
    int i18 = inventory11.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe19 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b20 = inventory11.useIngredients(recipe19);
    boolean b21 = coffeeMaker7.addRecipe(recipe19);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i24 = recipe23.getPrice();
    int i25 = recipe23.getAmtChocolate();
    java.lang.String str26 = coffeeMaker7.editRecipe(0, recipe23);
    boolean b27 = coffeeMaker6.addRecipe(recipe23);
    int i28 = recipe23.getAmtSugar();
    boolean b29 = inventory0.useIngredients(recipe23);
    recipe23.setName("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker8 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker9 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe11 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str12 = coffeeMaker9.editRecipe(0, recipe11);
    edu.ncsu.csc326.coffeemaker.Inventory inventory13 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i14 = inventory13.getMilk();
    int i15 = inventory13.getCoffee();
    inventory13.setChocolate((int)(byte)-1);
    inventory13.setCoffee((int)(byte)10);
    int i20 = inventory13.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b22 = inventory13.useIngredients(recipe21);
    boolean b23 = coffeeMaker9.addRecipe(recipe21);
    edu.ncsu.csc326.coffeemaker.Recipe recipe25 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i26 = recipe25.getPrice();
    int i27 = recipe25.getAmtChocolate();
    java.lang.String str28 = coffeeMaker9.editRecipe(0, recipe25);
    boolean b29 = coffeeMaker8.addRecipe(recipe25);
    int i30 = recipe25.getAmtSugar();
    int i31 = recipe25.getAmtChocolate();
    int i32 = recipe25.getAmtCoffee();
    int i33 = recipe25.getAmtCoffee();
    int i34 = recipe25.getPrice();
    boolean b35 = inventory0.useIngredients(recipe25);
    int i36 = recipe25.getPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    inventory0.setChocolate(100);
    inventory0.setMilk((int)(byte)1);
    inventory0.setChocolate(0);
    int i9 = inventory0.getCoffee();
    inventory0.setMilk(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 15);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    java.lang.String str2 = recipeException1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"+ "'", str2.equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"));

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    java.lang.String str22 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i24 = recipe23.getPrice();
    java.lang.String str25 = recipe23.toString();
    int i26 = recipe23.getPrice();
    int i27 = recipe23.getAmtChocolate();
    java.lang.String str28 = recipe23.toString();
    boolean b29 = coffeeMaker0.addRecipe(recipe23);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array30 = coffeeMaker0.getRecipes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str22.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array30);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    inventory0.setChocolate(100);
    inventory0.setMilk((int)(byte)-1);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    int i5 = inventory0.getChocolate();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker6 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker7 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe9 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str10 = coffeeMaker7.editRecipe(0, recipe9);
    edu.ncsu.csc326.coffeemaker.Inventory inventory11 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i12 = inventory11.getMilk();
    int i13 = inventory11.getCoffee();
    inventory11.setChocolate((int)(byte)-1);
    inventory11.setCoffee((int)(byte)10);
    int i18 = inventory11.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe19 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b20 = inventory11.useIngredients(recipe19);
    boolean b21 = coffeeMaker7.addRecipe(recipe19);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i24 = recipe23.getPrice();
    int i25 = recipe23.getAmtChocolate();
    java.lang.String str26 = coffeeMaker7.editRecipe(0, recipe23);
    boolean b27 = coffeeMaker6.addRecipe(recipe23);
    int i28 = recipe23.getAmtSugar();
    boolean b29 = inventory0.useIngredients(recipe23);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(short)1);
    int i5 = inventory0.getCoffee();
    int i6 = inventory0.getCoffee();
    inventory0.setChocolate(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getCoffee();
    inventory0.setCoffee((int)(byte)-1);
    int i4 = inventory0.getSugar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 15);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    inventory0.setMilk(10);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker12 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker13 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe15 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str16 = coffeeMaker13.editRecipe(0, recipe15);
    edu.ncsu.csc326.coffeemaker.Inventory inventory17 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i18 = inventory17.getMilk();
    int i19 = inventory17.getCoffee();
    inventory17.setChocolate((int)(byte)-1);
    inventory17.setCoffee((int)(byte)10);
    int i24 = inventory17.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe25 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b26 = inventory17.useIngredients(recipe25);
    boolean b27 = coffeeMaker13.addRecipe(recipe25);
    edu.ncsu.csc326.coffeemaker.Recipe recipe29 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i30 = recipe29.getPrice();
    int i31 = recipe29.getAmtChocolate();
    java.lang.String str32 = coffeeMaker13.editRecipe(0, recipe29);
    boolean b33 = coffeeMaker12.addRecipe(recipe29);
    int i34 = recipe29.getAmtSugar();
    int i35 = recipe29.getAmtSugar();
    boolean b36 = inventory0.useIngredients(recipe29);
    recipe29.setName("");
    int i39 = recipe29.getPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    int i10 = recipe8.getAmtMilk();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    inventory0.setChocolate(100);
    inventory0.setChocolate((int)(short)0);
    int i7 = inventory0.getChocolate();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addChocolate("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array5 = recipeBook0.getRecipes();
    java.lang.String str7 = recipeBook0.deleteRecipe((int)(short)0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str9 = recipeBook0.deleteRecipe((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = recipeBook0.addRecipe(recipe7);
    recipe7.setName("hi!");
    java.lang.String str14 = recipe7.toString();
    java.lang.String str15 = recipe7.toString();
    // The following exception was thrown during execution in test generation
    try {
    recipe7.setAmtSugar("");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "hi!"+ "'", str15.equals("hi!"));

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setMilk((-1));
    inventory0.setChocolate((-1));
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker5 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker6 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str9 = coffeeMaker6.editRecipe(0, recipe8);
    edu.ncsu.csc326.coffeemaker.Inventory inventory10 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i11 = inventory10.getMilk();
    int i12 = inventory10.getCoffee();
    inventory10.setChocolate((int)(byte)-1);
    inventory10.setCoffee((int)(byte)10);
    int i17 = inventory10.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe18 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b19 = inventory10.useIngredients(recipe18);
    boolean b20 = coffeeMaker6.addRecipe(recipe18);
    edu.ncsu.csc326.coffeemaker.Recipe recipe22 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i23 = recipe22.getPrice();
    int i24 = recipe22.getAmtChocolate();
    java.lang.String str25 = coffeeMaker6.editRecipe(0, recipe22);
    boolean b26 = coffeeMaker5.addRecipe(recipe22);
    int i27 = recipe22.getAmtSugar();
    int i28 = recipe22.getAmtChocolate();
    boolean b29 = inventory0.useIngredients(recipe22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook17 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory18.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook21 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str23 = recipeBook21.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe24 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b25 = recipeBook21.addRecipe(recipe24);
    int i26 = recipe24.getAmtCoffee();
    int i27 = recipe24.getAmtCoffee();
    boolean b28 = inventory18.useIngredients(recipe24);
    java.lang.String str29 = recipe24.getName();
    boolean b30 = recipeBook17.addRecipe(recipe24);
    boolean b31 = coffeeMaker0.addRecipe(recipe24);
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.Inventory inventory17 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i18 = inventory17.getMilk();
    int i19 = inventory17.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    boolean b26 = inventory17.useIngredients(recipe23);
    int i27 = recipe23.getPrice();
    boolean b28 = coffeeMaker0.addRecipe(recipe23);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array29 = coffeeMaker0.getRecipes();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str31 = coffeeMaker0.deleteRecipe((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array29);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setMilk((-1));
    int i3 = inventory0.getMilk();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker4 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe5 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i6 = recipe5.getPrice();
    int i7 = recipe5.getAmtChocolate();
    int i8 = recipe5.getAmtCoffee();
    boolean b9 = coffeeMaker4.addRecipe(recipe5);
    recipe5.setName("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    boolean b12 = inventory0.useIngredients(recipe5);
    int i13 = recipe5.getAmtSugar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    inventory0.setSugar((int)' ');

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("");
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException3 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    java.lang.String str4 = inventoryException3.toString();
    inventoryException1.addSuppressed((java.lang.Throwable)inventoryException3);
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException7 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: ");
    inventoryException3.addSuppressed((java.lang.Throwable)inventoryException7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"+ "'", str4.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"));

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory5.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook8 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str10 = recipeBook8.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe11 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b12 = recipeBook8.addRecipe(recipe11);
    int i13 = recipe11.getAmtCoffee();
    int i14 = recipe11.getAmtCoffee();
    boolean b15 = inventory5.useIngredients(recipe11);
    java.lang.String str16 = recipe11.getName();
    java.lang.String str17 = recipeBook0.editRecipe((int)(short)0, recipe11);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array18 = recipeBook0.getRecipes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array18);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    inventory0.setMilk(10);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    edu.ncsu.csc326.coffeemaker.Recipe recipe16 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i17 = recipe16.getPrice();
    int i18 = recipe16.getAmtChocolate();
    java.lang.String str19 = coffeeMaker0.editRecipe(0, recipe16);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array20 = coffeeMaker0.getRecipes();
    // The following exception was thrown during execution in test generation
    try {
    int i23 = coffeeMaker0.makeCoffee((int)' ', 15);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array20);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n");
    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException3 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    java.lang.Throwable[] throwable_array4 = recipeException3.getSuppressed();
    recipeException1.addSuppressed((java.lang.Throwable)recipeException3);
    java.lang.String str6 = recipeException3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"+ "'", str6.equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"));

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook16 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str18 = recipeBook16.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array19 = recipeBook16.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    int i26 = recipe23.getAmtCoffee();
    boolean b27 = recipeBook16.addRecipe(recipe23);
    recipe23.setName("hi!");
    recipe23.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    boolean b32 = coffeeMaker0.addRecipe(recipe23);
    int i35 = coffeeMaker0.makeCoffee(0, 0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe36 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i37 = recipe36.getPrice();
    java.lang.String str38 = recipe36.toString();
    recipe36.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    boolean b41 = coffeeMaker0.addRecipe(recipe36);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook42 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str44 = recipeBook42.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook45 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory46 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory46.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook49 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str51 = recipeBook49.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe52 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b53 = recipeBook49.addRecipe(recipe52);
    int i54 = recipe52.getAmtCoffee();
    int i55 = recipe52.getAmtCoffee();
    boolean b56 = inventory46.useIngredients(recipe52);
    java.lang.String str57 = recipe52.getName();
    boolean b58 = recipeBook45.addRecipe(recipe52);
    boolean b59 = recipeBook42.addRecipe(recipe52);
    boolean b60 = coffeeMaker0.addRecipe(recipe52);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str62 = coffeeMaker0.deleteRecipe((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + ""+ "'", str57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = recipeBook0.addRecipe(recipe7);
    recipe7.setName("hi!");
    java.lang.String str14 = recipe7.toString();
    int i15 = recipe7.getPrice();
    // The following exception was thrown during execution in test generation
    try {
    recipe7.setAmtSugar("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array1 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Inventory inventory3 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i4 = inventory3.getMilk();
    int i5 = inventory3.getCoffee();
    int i6 = inventory3.getMilk();
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i8 = recipe7.getPrice();
    java.lang.String str9 = recipe7.toString();
    boolean b10 = inventory3.useIngredients(recipe7);
    java.lang.String str11 = recipe7.getName();
    java.lang.String str12 = recipe7.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str13 = recipeBook0.editRecipe((int)(short)-1, recipe7);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + ""+ "'", str9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook5 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str7 = recipeBook5.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook8 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory9 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory9.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook12 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str14 = recipeBook12.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe15 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b16 = recipeBook12.addRecipe(recipe15);
    int i17 = recipe15.getAmtCoffee();
    int i18 = recipe15.getAmtCoffee();
    boolean b19 = inventory9.useIngredients(recipe15);
    java.lang.String str20 = recipe15.getName();
    boolean b21 = recipeBook8.addRecipe(recipe15);
    boolean b22 = recipeBook5.addRecipe(recipe15);
    edu.ncsu.csc326.coffeemaker.Inventory inventory23 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i24 = inventory23.getMilk();
    int i25 = inventory23.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe26 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i27 = recipe26.getPrice();
    int i28 = recipe26.getAmtChocolate();
    int i29 = recipe26.getAmtCoffee();
    int i30 = recipe26.getPrice();
    boolean b31 = inventory23.useIngredients(recipe26);
    int i32 = inventory23.getSugar();
    boolean b33 = recipe15.equals((java.lang.Object)i32);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str34 = recipeBook0.editRecipe((int)(short)100, recipe15);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i8 = recipe7.getPrice();
    int i9 = recipe7.getAmtChocolate();
    java.lang.String str10 = recipeBook3.editRecipe(0, recipe7);
    boolean b11 = recipeBook0.addRecipe(recipe7);
    java.lang.String str12 = recipe7.getName();
    java.lang.String str13 = recipe7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = inventory0.getChocolate();
    java.lang.String str11 = inventory0.toString();
    int i12 = inventory0.getCoffee();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addSugar("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str11.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setMilk((-1));
    int i3 = inventory0.getChocolate();
    int i4 = inventory0.getChocolate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 15);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    inventory0.setChocolate(100);
    inventory0.setMilk((int)(byte)1);
    inventory0.setChocolate(0);
    int i9 = inventory0.getCoffee();
    inventory0.setCoffee((int)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 15);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    // The following exception was thrown during execution in test generation
    try {
    int i17 = coffeeMaker0.makeCoffee((int)(short)-1, (int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i1 = recipe0.getPrice();
    java.lang.String str2 = recipe0.toString();
    recipe0.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    java.lang.String str5 = recipe0.getName();
    // The following exception was thrown during execution in test generation
    try {
    recipe0.setPrice("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str5.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    java.lang.Throwable[] throwable_array2 = inventoryException1.getSuppressed();
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException4 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    inventoryException1.addSuppressed((java.lang.Throwable)inventoryException4);
    java.lang.String str6 = inventoryException4.toString();
    java.lang.Throwable[] throwable_array7 = inventoryException4.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str6.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array7);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    inventory0.setMilk(10);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker12 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker13 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe15 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str16 = coffeeMaker13.editRecipe(0, recipe15);
    edu.ncsu.csc326.coffeemaker.Inventory inventory17 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i18 = inventory17.getMilk();
    int i19 = inventory17.getCoffee();
    inventory17.setChocolate((int)(byte)-1);
    inventory17.setCoffee((int)(byte)10);
    int i24 = inventory17.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe25 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b26 = inventory17.useIngredients(recipe25);
    boolean b27 = coffeeMaker13.addRecipe(recipe25);
    edu.ncsu.csc326.coffeemaker.Recipe recipe29 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i30 = recipe29.getPrice();
    int i31 = recipe29.getAmtChocolate();
    java.lang.String str32 = coffeeMaker13.editRecipe(0, recipe29);
    boolean b33 = coffeeMaker12.addRecipe(recipe29);
    int i34 = recipe29.getAmtSugar();
    int i35 = recipe29.getAmtSugar();
    boolean b36 = inventory0.useIngredients(recipe29);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory4.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook7 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str9 = recipeBook7.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe10 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b11 = recipeBook7.addRecipe(recipe10);
    int i12 = recipe10.getAmtCoffee();
    int i13 = recipe10.getAmtCoffee();
    boolean b14 = inventory4.useIngredients(recipe10);
    java.lang.String str15 = recipe10.getName();
    boolean b16 = recipeBook3.addRecipe(recipe10);
    boolean b17 = recipeBook0.addRecipe(recipe10);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker18 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker19 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str22 = coffeeMaker19.editRecipe(0, recipe21);
    edu.ncsu.csc326.coffeemaker.Inventory inventory23 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i24 = inventory23.getMilk();
    int i25 = inventory23.getCoffee();
    inventory23.setChocolate((int)(byte)-1);
    inventory23.setCoffee((int)(byte)10);
    int i30 = inventory23.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe31 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b32 = inventory23.useIngredients(recipe31);
    boolean b33 = coffeeMaker19.addRecipe(recipe31);
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i36 = recipe35.getPrice();
    int i37 = recipe35.getAmtChocolate();
    java.lang.String str38 = coffeeMaker19.editRecipe(0, recipe35);
    boolean b39 = coffeeMaker18.addRecipe(recipe35);
    int i40 = recipe35.getAmtSugar();
    recipe35.setName("");
    boolean b44 = recipe35.equals((java.lang.Object)(-1));
    boolean b45 = recipeBook0.addRecipe(recipe35);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook46 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str48 = recipeBook46.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe49 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b50 = recipeBook46.addRecipe(recipe49);
    recipe49.setName("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    boolean b53 = recipeBook0.addRecipe(recipe49);
    // The following exception was thrown during execution in test generation
    try {
    recipe49.setAmtMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str5 = recipeBook0.deleteRecipe((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    java.lang.String str3 = inventory0.toString();
    inventory0.setChocolate((-1));
    java.lang.String str6 = inventory0.toString();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addChocolate("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str3.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str6.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    inventory0.setSugar(15);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addChocolate("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array5 = recipeBook0.getRecipes();
    java.lang.String str7 = recipeBook0.deleteRecipe((int)(short)0);
    edu.ncsu.csc326.coffeemaker.Inventory inventory8 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i9 = inventory8.getMilk();
    int i10 = inventory8.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook11 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str13 = recipeBook11.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe14 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b15 = recipeBook11.addRecipe(recipe14);
    int i16 = recipe14.getAmtCoffee();
    boolean b17 = inventory8.useIngredients(recipe14);
    int i18 = recipe14.getAmtCoffee();
    boolean b19 = recipeBook0.addRecipe(recipe14);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array20 = recipeBook0.getRecipes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array20);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = recipeBook0.addRecipe(recipe7);
    recipe7.setName("hi!");
    recipe7.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    int i16 = recipe7.getAmtCoffee();
    int i17 = recipe7.getAmtSugar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = recipeBook0.addRecipe(recipe7);
    recipe7.setName("hi!");
    int i14 = recipe7.getAmtMilk();
    // The following exception was thrown during execution in test generation
    try {
    recipe7.setPrice("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    int i3 = inventory0.getMilk();
    int i4 = inventory0.getCoffee();
    java.lang.String str5 = inventory0.toString();
    inventory0.setMilk((int)(byte)1);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str5.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = recipe6.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory11 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i12 = inventory11.getMilk();
    int i13 = inventory11.getCoffee();
    inventory11.setChocolate((int)(byte)-1);
    inventory11.setCoffee((int)(byte)10);
    int i18 = inventory11.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe19 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b20 = inventory11.useIngredients(recipe19);
    int i21 = inventory11.getCoffee();
    int i22 = inventory11.getChocolate();
    inventory11.setCoffee((int)' ');
    int i25 = inventory11.getCoffee();
    boolean b26 = recipe6.equals((java.lang.Object)inventory11);
    int i27 = inventory11.getSugar();
    java.lang.String str28 = inventory11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str28.equals("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    java.lang.String str11 = recipe6.getName();
    int i12 = recipe6.getAmtChocolate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook17 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory18.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook21 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str23 = recipeBook21.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe24 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b25 = recipeBook21.addRecipe(recipe24);
    int i26 = recipe24.getAmtCoffee();
    int i27 = recipe24.getAmtCoffee();
    boolean b28 = inventory18.useIngredients(recipe24);
    java.lang.String str29 = recipe24.getName();
    boolean b30 = recipeBook17.addRecipe(recipe24);
    boolean b31 = coffeeMaker0.addRecipe(recipe24);
    java.lang.String str32 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker33 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str36 = coffeeMaker33.editRecipe(0, recipe35);
    edu.ncsu.csc326.coffeemaker.Inventory inventory37 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i38 = inventory37.getMilk();
    int i39 = inventory37.getCoffee();
    inventory37.setChocolate((int)(byte)-1);
    inventory37.setCoffee((int)(byte)10);
    int i44 = inventory37.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe45 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b46 = inventory37.useIngredients(recipe45);
    boolean b47 = coffeeMaker33.addRecipe(recipe45);
    java.lang.String str48 = coffeeMaker33.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook49 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str51 = recipeBook49.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array52 = recipeBook49.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook53 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str55 = recipeBook53.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe56 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b57 = recipeBook53.addRecipe(recipe56);
    int i58 = recipe56.getAmtCoffee();
    int i59 = recipe56.getAmtCoffee();
    boolean b60 = recipeBook49.addRecipe(recipe56);
    recipe56.setName("hi!");
    recipe56.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    boolean b65 = coffeeMaker33.addRecipe(recipe56);
    edu.ncsu.csc326.coffeemaker.Recipe recipe66 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i67 = recipe66.getPrice();
    java.lang.String str68 = recipe66.toString();
    boolean b69 = coffeeMaker33.addRecipe(recipe66);
    boolean b70 = coffeeMaker0.addRecipe(recipe66);
    edu.ncsu.csc326.coffeemaker.Inventory inventory71 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i72 = inventory71.getMilk();
    int i73 = inventory71.getCoffee();
    int i74 = inventory71.getMilk();
    edu.ncsu.csc326.coffeemaker.Recipe recipe75 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i76 = recipe75.getPrice();
    java.lang.String str77 = recipe75.toString();
    boolean b78 = inventory71.useIngredients(recipe75);
    java.lang.String str79 = recipe75.getName();
    java.lang.String str80 = recipe75.toString();
    boolean b81 = coffeeMaker0.addRecipe(recipe75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str32.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str48.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + ""+ "'", str68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + ""+ "'", str77.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + ""+ "'", str79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + ""+ "'", str80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    int i23 = recipe17.getAmtSugar();
    java.lang.String str24 = recipe17.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    recipe3.setName("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    java.lang.String str7 = recipe3.toString();
    int i8 = recipe3.getAmtMilk();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"+ "'", str7.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = inventory0.getChocolate();
    java.lang.String str11 = inventory0.toString();
    int i12 = inventory0.getCoffee();
    int i13 = inventory0.getChocolate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str11.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    int i10 = inventory0.getCoffee();
    int i11 = inventory0.getChocolate();
    inventory0.setCoffee((int)' ');
    int i14 = inventory0.getCoffee();
    int i15 = inventory0.getChocolate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 15);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    boolean b10 = recipeBook0.addRecipe(recipe7);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array11 = recipeBook0.getRecipes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array11);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    int i23 = recipe17.getAmtChocolate();
    int i24 = recipe17.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory25 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i26 = inventory25.getMilk();
    int i27 = inventory25.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook28 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str30 = recipeBook28.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe31 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b32 = recipeBook28.addRecipe(recipe31);
    int i33 = recipe31.getAmtCoffee();
    boolean b34 = inventory25.useIngredients(recipe31);
    int i35 = recipe31.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory36 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i37 = inventory36.getMilk();
    int i38 = inventory36.getCoffee();
    inventory36.setChocolate((int)(byte)-1);
    inventory36.setCoffee((int)(byte)10);
    int i43 = inventory36.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe44 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b45 = inventory36.useIngredients(recipe44);
    int i46 = inventory36.getCoffee();
    int i47 = inventory36.getChocolate();
    inventory36.setCoffee((int)' ');
    int i50 = inventory36.getCoffee();
    boolean b51 = recipe31.equals((java.lang.Object)inventory36);
    boolean b52 = recipe17.equals((java.lang.Object)b51);
    java.lang.String str53 = recipe17.getName();
    int i54 = recipe17.getAmtCoffee();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + ""+ "'", str53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    inventory0.setSugar((int)(byte)10);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker12 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe14 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str15 = coffeeMaker12.editRecipe(0, recipe14);
    edu.ncsu.csc326.coffeemaker.Inventory inventory16 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i17 = inventory16.getMilk();
    int i18 = inventory16.getCoffee();
    inventory16.setChocolate((int)(byte)-1);
    inventory16.setCoffee((int)(byte)10);
    int i23 = inventory16.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe24 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b25 = inventory16.useIngredients(recipe24);
    boolean b26 = coffeeMaker12.addRecipe(recipe24);
    java.lang.String str27 = coffeeMaker12.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook28 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str30 = recipeBook28.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array31 = recipeBook28.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook32 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str34 = recipeBook32.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b36 = recipeBook32.addRecipe(recipe35);
    int i37 = recipe35.getAmtCoffee();
    int i38 = recipe35.getAmtCoffee();
    boolean b39 = recipeBook28.addRecipe(recipe35);
    recipe35.setName("hi!");
    recipe35.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    boolean b44 = coffeeMaker12.addRecipe(recipe35);
    edu.ncsu.csc326.coffeemaker.Recipe recipe45 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i46 = recipe45.getPrice();
    java.lang.String str47 = recipe45.toString();
    boolean b48 = coffeeMaker12.addRecipe(recipe45);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook49 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str51 = recipeBook49.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array52 = recipeBook49.getRecipes();
    edu.ncsu.csc326.coffeemaker.Inventory inventory54 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory54.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook57 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str59 = recipeBook57.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe60 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b61 = recipeBook57.addRecipe(recipe60);
    int i62 = recipe60.getAmtCoffee();
    int i63 = recipe60.getAmtCoffee();
    boolean b64 = inventory54.useIngredients(recipe60);
    java.lang.String str65 = recipe60.getName();
    java.lang.String str66 = recipeBook49.editRecipe((int)(short)0, recipe60);
    int i67 = recipe60.getAmtMilk();
    java.lang.String str68 = recipe60.toString();
    boolean b69 = recipe45.equals((java.lang.Object)str68);
    java.lang.String str70 = recipe45.getName();
    boolean b71 = inventory0.useIngredients(recipe45);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str27.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + ""+ "'", str47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + ""+ "'", str65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + ""+ "'", str68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + ""+ "'", str70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = recipe6.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory11 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i12 = inventory11.getMilk();
    int i13 = inventory11.getCoffee();
    inventory11.setChocolate((int)(byte)-1);
    inventory11.setCoffee((int)(byte)10);
    int i18 = inventory11.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe19 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b20 = inventory11.useIngredients(recipe19);
    int i21 = inventory11.getCoffee();
    int i22 = inventory11.getChocolate();
    inventory11.setCoffee((int)' ');
    int i25 = inventory11.getCoffee();
    boolean b26 = recipe6.equals((java.lang.Object)inventory11);
    int i27 = inventory11.getSugar();
    inventory11.setMilk((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 15);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker4 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker5 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str8 = coffeeMaker5.editRecipe(0, recipe7);
    edu.ncsu.csc326.coffeemaker.Inventory inventory9 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i10 = inventory9.getMilk();
    int i11 = inventory9.getCoffee();
    inventory9.setChocolate((int)(byte)-1);
    inventory9.setCoffee((int)(byte)10);
    int i16 = inventory9.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b18 = inventory9.useIngredients(recipe17);
    boolean b19 = coffeeMaker5.addRecipe(recipe17);
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i22 = recipe21.getPrice();
    int i23 = recipe21.getAmtChocolate();
    java.lang.String str24 = coffeeMaker5.editRecipe(0, recipe21);
    boolean b25 = coffeeMaker4.addRecipe(recipe21);
    int i26 = recipe21.getAmtSugar();
    int i27 = recipe21.getAmtChocolate();
    int i28 = recipe21.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory29 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i30 = inventory29.getMilk();
    int i31 = inventory29.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook32 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str34 = recipeBook32.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b36 = recipeBook32.addRecipe(recipe35);
    int i37 = recipe35.getAmtCoffee();
    boolean b38 = inventory29.useIngredients(recipe35);
    int i39 = recipe35.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory40 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i41 = inventory40.getMilk();
    int i42 = inventory40.getCoffee();
    inventory40.setChocolate((int)(byte)-1);
    inventory40.setCoffee((int)(byte)10);
    int i47 = inventory40.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe48 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b49 = inventory40.useIngredients(recipe48);
    int i50 = inventory40.getCoffee();
    int i51 = inventory40.getChocolate();
    inventory40.setCoffee((int)' ');
    int i54 = inventory40.getCoffee();
    boolean b55 = recipe35.equals((java.lang.Object)inventory40);
    boolean b56 = recipe21.equals((java.lang.Object)b55);
    boolean b57 = coffeeMaker0.addRecipe(recipe21);
    java.lang.String str58 = coffeeMaker0.checkInventory();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + ""+ "'", str24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str58.equals("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i1 = recipe0.getPrice();
    java.lang.String str2 = recipe0.toString();
    int i3 = recipe0.getPrice();
    int i4 = recipe0.getAmtChocolate();
    int i5 = recipe0.getAmtSugar();
    int i6 = recipe0.getAmtChocolate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    int i5 = inventory0.getChocolate();
    int i6 = inventory0.getCoffee();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    java.lang.String str2 = coffeeMaker0.deleteRecipe((int)(short)1);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker3 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe5 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str6 = coffeeMaker3.editRecipe(0, recipe5);
    edu.ncsu.csc326.coffeemaker.Inventory inventory7 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i8 = inventory7.getMilk();
    int i9 = inventory7.getCoffee();
    inventory7.setChocolate((int)(byte)-1);
    inventory7.setCoffee((int)(byte)10);
    int i14 = inventory7.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe15 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b16 = inventory7.useIngredients(recipe15);
    boolean b17 = coffeeMaker3.addRecipe(recipe15);
    java.lang.String str18 = coffeeMaker3.checkInventory();
    java.lang.String str19 = coffeeMaker3.checkInventory();
    edu.ncsu.csc326.coffeemaker.Inventory inventory20 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i21 = inventory20.getMilk();
    int i22 = inventory20.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook23 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str25 = recipeBook23.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe26 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b27 = recipeBook23.addRecipe(recipe26);
    int i28 = recipe26.getAmtCoffee();
    boolean b29 = inventory20.useIngredients(recipe26);
    int i30 = recipe26.getPrice();
    boolean b31 = coffeeMaker3.addRecipe(recipe26);
    boolean b32 = coffeeMaker0.addRecipe(recipe26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str18.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str19.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    boolean b10 = recipeBook0.addRecipe(recipe7);
    int i11 = recipe7.getAmtCoffee();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    inventory0.setMilk(10);
    int i12 = inventory0.getCoffee();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    int i10 = inventory0.getCoffee();
    inventory0.setSugar(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory1 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory1.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = inventory1.useIngredients(recipe7);
    java.lang.String str12 = recipe7.getName();
    boolean b13 = recipeBook0.addRecipe(recipe7);
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException15 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    java.lang.Throwable[] throwable_array16 = inventoryException15.getSuppressed();
    boolean b17 = recipe7.equals((java.lang.Object)throwable_array16);
    // The following exception was thrown during execution in test generation
    try {
    recipe7.setAmtMilk("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + ""+ "'", str12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array5 = recipeBook0.getRecipes();
    java.lang.String str7 = recipeBook0.deleteRecipe((int)(short)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array8 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Recipe recipe9 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i10 = recipe9.getPrice();
    java.lang.String str11 = recipe9.toString();
    int i12 = recipe9.getPrice();
    int i13 = recipe9.getAmtChocolate();
    java.lang.String str14 = recipe9.toString();
    boolean b15 = recipeBook0.addRecipe(recipe9);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker17 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe19 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str20 = coffeeMaker17.editRecipe(0, recipe19);
    edu.ncsu.csc326.coffeemaker.Inventory inventory21 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i22 = inventory21.getMilk();
    int i23 = inventory21.getCoffee();
    inventory21.setChocolate((int)(byte)-1);
    inventory21.setCoffee((int)(byte)10);
    int i28 = inventory21.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe29 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b30 = inventory21.useIngredients(recipe29);
    boolean b31 = coffeeMaker17.addRecipe(recipe29);
    java.lang.String str32 = coffeeMaker17.checkInventory();
    java.lang.String str33 = coffeeMaker17.checkInventory();
    edu.ncsu.csc326.coffeemaker.Inventory inventory34 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i35 = inventory34.getMilk();
    int i36 = inventory34.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook37 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str39 = recipeBook37.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe40 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b41 = recipeBook37.addRecipe(recipe40);
    int i42 = recipe40.getAmtCoffee();
    boolean b43 = inventory34.useIngredients(recipe40);
    int i44 = recipe40.getPrice();
    boolean b45 = coffeeMaker17.addRecipe(recipe40);
    int i46 = recipe40.getAmtCoffee();
    int i47 = recipe40.getPrice();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str48 = recipeBook0.editRecipe((int)(byte)-1, recipe40);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str32.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str33.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory4.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook7 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str9 = recipeBook7.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe10 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b11 = recipeBook7.addRecipe(recipe10);
    int i12 = recipe10.getAmtCoffee();
    int i13 = recipe10.getAmtCoffee();
    boolean b14 = inventory4.useIngredients(recipe10);
    java.lang.String str15 = recipe10.getName();
    boolean b16 = recipeBook3.addRecipe(recipe10);
    boolean b17 = recipeBook0.addRecipe(recipe10);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker18 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker19 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str22 = coffeeMaker19.editRecipe(0, recipe21);
    edu.ncsu.csc326.coffeemaker.Inventory inventory23 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i24 = inventory23.getMilk();
    int i25 = inventory23.getCoffee();
    inventory23.setChocolate((int)(byte)-1);
    inventory23.setCoffee((int)(byte)10);
    int i30 = inventory23.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe31 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b32 = inventory23.useIngredients(recipe31);
    boolean b33 = coffeeMaker19.addRecipe(recipe31);
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i36 = recipe35.getPrice();
    int i37 = recipe35.getAmtChocolate();
    java.lang.String str38 = coffeeMaker19.editRecipe(0, recipe35);
    boolean b39 = coffeeMaker18.addRecipe(recipe35);
    int i40 = recipe35.getAmtSugar();
    recipe35.setName("");
    boolean b44 = recipe35.equals((java.lang.Object)(-1));
    boolean b45 = recipeBook0.addRecipe(recipe35);
    java.lang.String str47 = recipeBook0.deleteRecipe((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = recipe6.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory11 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i12 = inventory11.getMilk();
    int i13 = inventory11.getCoffee();
    inventory11.setChocolate((int)(byte)-1);
    inventory11.setCoffee((int)(byte)10);
    int i18 = inventory11.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe19 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b20 = inventory11.useIngredients(recipe19);
    int i21 = inventory11.getCoffee();
    int i22 = inventory11.getChocolate();
    inventory11.setCoffee((int)' ');
    int i25 = inventory11.getCoffee();
    boolean b26 = recipe6.equals((java.lang.Object)inventory11);
    java.lang.String str27 = inventory11.toString();
    // The following exception was thrown during execution in test generation
    try {
    inventory11.addChocolate("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str27.equals("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    java.lang.String str3 = inventory0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str3.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    java.lang.String str4 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory5.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook8 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str10 = recipeBook8.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe11 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b12 = recipeBook8.addRecipe(recipe11);
    int i13 = recipe11.getAmtCoffee();
    int i14 = recipe11.getAmtCoffee();
    boolean b15 = inventory5.useIngredients(recipe11);
    java.lang.String str16 = recipe11.getName();
    int i17 = recipe11.getAmtSugar();
    boolean b18 = recipeBook0.addRecipe(recipe11);
    edu.ncsu.csc326.coffeemaker.Recipe recipe20 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i21 = recipe20.getPrice();
    java.lang.String str22 = recipe20.toString();
    recipe20.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    java.lang.String str25 = recipe20.getName();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str26 = recipeBook0.editRecipe((int)'4', recipe20);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + ""+ "'", str16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str25.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    edu.ncsu.csc326.coffeemaker.Recipe recipe16 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i17 = recipe16.getPrice();
    int i18 = recipe16.getAmtChocolate();
    java.lang.String str19 = coffeeMaker0.editRecipe(0, recipe16);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array20 = coffeeMaker0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Inventory inventory22 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i23 = inventory22.getMilk();
    int i24 = inventory22.getCoffee();
    inventory22.setChocolate((int)(byte)-1);
    inventory22.setCoffee((int)(byte)10);
    int i29 = inventory22.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe30 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b31 = inventory22.useIngredients(recipe30);
    int i32 = inventory22.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook33 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str35 = recipeBook33.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe36 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b37 = recipeBook33.addRecipe(recipe36);
    java.lang.String str38 = recipe36.getName();
    boolean b39 = inventory22.useIngredients(recipe36);
    java.lang.String str40 = coffeeMaker0.editRecipe(1, recipe36);
    // The following exception was thrown during execution in test generation
    try {
    recipe36.setAmtMilk("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str40);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array5 = recipeBook0.getRecipes();
    java.lang.String str7 = recipeBook0.deleteRecipe((int)(short)0);
    edu.ncsu.csc326.coffeemaker.Inventory inventory8 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i9 = inventory8.getMilk();
    int i10 = inventory8.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook11 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str13 = recipeBook11.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe14 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b15 = recipeBook11.addRecipe(recipe14);
    int i16 = recipe14.getAmtCoffee();
    boolean b17 = inventory8.useIngredients(recipe14);
    int i18 = recipe14.getAmtCoffee();
    boolean b19 = recipeBook0.addRecipe(recipe14);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker20 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker21 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str24 = coffeeMaker21.editRecipe(0, recipe23);
    edu.ncsu.csc326.coffeemaker.Inventory inventory25 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i26 = inventory25.getMilk();
    int i27 = inventory25.getCoffee();
    inventory25.setChocolate((int)(byte)-1);
    inventory25.setCoffee((int)(byte)10);
    int i32 = inventory25.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe33 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b34 = inventory25.useIngredients(recipe33);
    boolean b35 = coffeeMaker21.addRecipe(recipe33);
    edu.ncsu.csc326.coffeemaker.Recipe recipe37 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i38 = recipe37.getPrice();
    int i39 = recipe37.getAmtChocolate();
    java.lang.String str40 = coffeeMaker21.editRecipe(0, recipe37);
    boolean b41 = coffeeMaker20.addRecipe(recipe37);
    java.lang.String str42 = coffeeMaker20.checkInventory();
    edu.ncsu.csc326.coffeemaker.Recipe recipe43 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i44 = recipe43.getPrice();
    java.lang.String str45 = recipe43.toString();
    int i46 = recipe43.getPrice();
    int i47 = recipe43.getAmtChocolate();
    java.lang.String str48 = recipe43.toString();
    boolean b49 = coffeeMaker20.addRecipe(recipe43);
    boolean b50 = recipeBook0.addRecipe(recipe43);
    java.lang.String str52 = recipeBook0.deleteRecipe((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str42.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + ""+ "'", str48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(short)1);
    int i5 = inventory0.getCoffee();
    java.lang.String str6 = inventory0.toString();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n"+ "'", str6.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n"));

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str16 = coffeeMaker0.deleteRecipe((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    inventory0.setCoffee((int)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory4.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook7 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str9 = recipeBook7.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe10 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b11 = recipeBook7.addRecipe(recipe10);
    int i12 = recipe10.getAmtCoffee();
    int i13 = recipe10.getAmtCoffee();
    boolean b14 = inventory4.useIngredients(recipe10);
    java.lang.String str15 = recipe10.getName();
    boolean b16 = recipeBook3.addRecipe(recipe10);
    boolean b17 = recipeBook0.addRecipe(recipe10);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker18 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker19 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str22 = coffeeMaker19.editRecipe(0, recipe21);
    edu.ncsu.csc326.coffeemaker.Inventory inventory23 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i24 = inventory23.getMilk();
    int i25 = inventory23.getCoffee();
    inventory23.setChocolate((int)(byte)-1);
    inventory23.setCoffee((int)(byte)10);
    int i30 = inventory23.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe31 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b32 = inventory23.useIngredients(recipe31);
    boolean b33 = coffeeMaker19.addRecipe(recipe31);
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i36 = recipe35.getPrice();
    int i37 = recipe35.getAmtChocolate();
    java.lang.String str38 = coffeeMaker19.editRecipe(0, recipe35);
    boolean b39 = coffeeMaker18.addRecipe(recipe35);
    int i40 = recipe35.getAmtSugar();
    recipe35.setName("");
    boolean b44 = recipe35.equals((java.lang.Object)(-1));
    boolean b45 = recipeBook0.addRecipe(recipe35);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook46 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str48 = recipeBook46.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe49 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b50 = recipeBook46.addRecipe(recipe49);
    recipe49.setName("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    boolean b53 = recipeBook0.addRecipe(recipe49);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook54 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str56 = recipeBook54.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe57 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b58 = recipeBook54.addRecipe(recipe57);
    java.lang.String str59 = recipe57.getName();
    boolean b60 = recipeBook0.addRecipe(recipe57);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array61 = recipeBook0.getRecipes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + ""+ "'", str59.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array61);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("hi!");
    java.lang.String str2 = recipeException1.toString();
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException4 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    java.lang.String str5 = inventoryException4.toString();
    java.lang.Throwable[] throwable_array6 = inventoryException4.getSuppressed();
    recipeException1.addSuppressed((java.lang.Throwable)inventoryException4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!"+ "'", str2.equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"+ "'", str5.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    // The following exception was thrown during execution in test generation
    try {
    int i24 = coffeeMaker0.makeCoffee((int)'#', (int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Recipe recipe4 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b5 = recipeBook0.addRecipe(recipe4);
    int i6 = recipe4.getAmtChocolate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(short)1);
    int i5 = inventory0.getCoffee();
    java.lang.String str6 = inventory0.toString();
    java.lang.String str7 = inventory0.toString();
    inventory0.setSugar((int)(short)-1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n"+ "'", str6.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n"+ "'", str7.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n"));

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = inventory0.getChocolate();
    java.lang.String str11 = inventory0.toString();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook12 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str14 = recipeBook12.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe15 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b16 = recipeBook12.addRecipe(recipe15);
    int i17 = recipe15.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i19 = inventory18.getMilk();
    int i20 = inventory18.getCoffee();
    inventory18.setChocolate((int)(byte)-1);
    int i23 = inventory18.getChocolate();
    boolean b24 = recipe15.equals((java.lang.Object)inventory18);
    boolean b25 = inventory0.useIngredients(recipe15);
    int i26 = recipe15.getAmtChocolate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str11.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    java.lang.String str2 = inventory0.toString();
    inventory0.setMilk(15);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook5 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str7 = recipeBook5.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = recipeBook5.addRecipe(recipe8);
    int i10 = recipe8.getAmtCoffee();
    boolean b11 = inventory0.useIngredients(recipe8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str2.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook16 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str18 = recipeBook16.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array19 = recipeBook16.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    int i26 = recipe23.getAmtCoffee();
    boolean b27 = recipeBook16.addRecipe(recipe23);
    boolean b28 = coffeeMaker0.addRecipe(recipe23);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook29 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory30 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory30.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook33 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str35 = recipeBook33.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe36 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b37 = recipeBook33.addRecipe(recipe36);
    int i38 = recipe36.getAmtCoffee();
    int i39 = recipe36.getAmtCoffee();
    boolean b40 = inventory30.useIngredients(recipe36);
    java.lang.String str41 = recipe36.getName();
    boolean b42 = recipeBook29.addRecipe(recipe36);
    int i43 = recipe36.getAmtSugar();
    boolean b44 = coffeeMaker0.addRecipe(recipe36);
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ", "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!", "hi!", "");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    int i3 = inventory0.getChocolate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 15);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    inventory0.setChocolate(100);
    inventory0.setChocolate(15);
    int i7 = inventory0.getMilk();
    int i8 = inventory0.getCoffee();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook16 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str18 = recipeBook16.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array19 = recipeBook16.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    int i26 = recipe23.getAmtCoffee();
    boolean b27 = recipeBook16.addRecipe(recipe23);
    boolean b28 = coffeeMaker0.addRecipe(recipe23);
    edu.ncsu.csc326.coffeemaker.Inventory inventory29 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i30 = inventory29.getMilk();
    int i31 = inventory29.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook32 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str34 = recipeBook32.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b36 = recipeBook32.addRecipe(recipe35);
    int i37 = recipe35.getAmtCoffee();
    boolean b38 = inventory29.useIngredients(recipe35);
    boolean b39 = coffeeMaker0.addRecipe(recipe35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook17 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory18.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook21 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str23 = recipeBook21.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe24 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b25 = recipeBook21.addRecipe(recipe24);
    int i26 = recipe24.getAmtCoffee();
    int i27 = recipe24.getAmtCoffee();
    boolean b28 = inventory18.useIngredients(recipe24);
    java.lang.String str29 = recipe24.getName();
    boolean b30 = recipeBook17.addRecipe(recipe24);
    boolean b31 = coffeeMaker0.addRecipe(recipe24);
    int i32 = recipe24.getPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    java.lang.String str22 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.Inventory inventory24 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory24.setSugar((int)(short)-1);
    inventory24.setChocolate(100);
    inventory24.setChocolate((int)(short)0);
    int i31 = inventory24.getChocolate();
    edu.ncsu.csc326.coffeemaker.Recipe recipe32 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i33 = recipe32.getPrice();
    int i34 = recipe32.getAmtChocolate();
    boolean b35 = inventory24.useIngredients(recipe32);
    recipe32.setName("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str38 = coffeeMaker0.editRecipe((int)(short)100, recipe32);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str22.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("hi!");
    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException3 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n");
    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException5 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    java.lang.Throwable[] throwable_array6 = recipeException5.getSuppressed();
    recipeException3.addSuppressed((java.lang.Throwable)recipeException5);
    recipeException1.addSuppressed((java.lang.Throwable)recipeException5);
    java.lang.Throwable[] throwable_array9 = recipeException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array9);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook16 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str18 = recipeBook16.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array19 = recipeBook16.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    int i26 = recipe23.getAmtCoffee();
    boolean b27 = recipeBook16.addRecipe(recipe23);
    recipe23.setName("hi!");
    recipe23.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    boolean b32 = coffeeMaker0.addRecipe(recipe23);
    int i35 = coffeeMaker0.makeCoffee((int)(byte)0, 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    java.lang.String str22 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i24 = recipe23.getPrice();
    java.lang.String str25 = recipe23.toString();
    int i26 = recipe23.getPrice();
    int i27 = recipe23.getAmtChocolate();
    java.lang.String str28 = recipe23.toString();
    boolean b29 = coffeeMaker0.addRecipe(recipe23);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str31 = coffeeMaker0.deleteRecipe((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str22.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe1 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i2 = recipe1.getPrice();
    int i3 = recipe1.getAmtChocolate();
    int i4 = recipe1.getAmtCoffee();
    boolean b5 = coffeeMaker0.addRecipe(recipe1);
    int i6 = recipe1.getAmtSugar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    int i5 = recipe3.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory6 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i7 = inventory6.getMilk();
    int i8 = inventory6.getCoffee();
    inventory6.setChocolate((int)(byte)-1);
    int i11 = inventory6.getChocolate();
    boolean b12 = recipe3.equals((java.lang.Object)inventory6);
    inventory6.setCoffee(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    inventory0.setCoffee(1);
    inventory0.setCoffee((int)(byte)10);
    int i15 = inventory0.getCoffee();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 10);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Recipe recipe4 = null;
    // The following exception was thrown during execution in test generation
    try {
    boolean b5 = recipeBook0.addRecipe(recipe4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!", "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    inventory0.setCoffee(1);
    inventory0.setCoffee((int)(byte)10);
    int i15 = inventory0.getMilk();
    inventory0.setChocolate((int)(short)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 15);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setMilk((-1));
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getSugar();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker3 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe5 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str6 = coffeeMaker3.editRecipe(0, recipe5);
    edu.ncsu.csc326.coffeemaker.Inventory inventory7 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i8 = inventory7.getMilk();
    int i9 = inventory7.getCoffee();
    inventory7.setChocolate((int)(byte)-1);
    inventory7.setCoffee((int)(byte)10);
    int i14 = inventory7.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe15 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b16 = inventory7.useIngredients(recipe15);
    boolean b17 = coffeeMaker3.addRecipe(recipe15);
    java.lang.String str18 = coffeeMaker3.checkInventory();
    java.lang.String str19 = coffeeMaker3.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory21 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory21.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook24 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str26 = recipeBook24.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe27 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b28 = recipeBook24.addRecipe(recipe27);
    int i29 = recipe27.getAmtCoffee();
    int i30 = recipe27.getAmtCoffee();
    boolean b31 = inventory21.useIngredients(recipe27);
    java.lang.String str32 = recipe27.getName();
    boolean b33 = recipeBook20.addRecipe(recipe27);
    boolean b34 = coffeeMaker3.addRecipe(recipe27);
    recipe27.setName("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
    boolean b37 = inventory0.useIngredients(recipe27);
    inventory0.setChocolate((int)(short)100);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 10\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str18.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str19.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe4 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i5 = recipe4.getPrice();
    int i6 = recipe4.getAmtChocolate();
    java.lang.String str7 = recipeBook0.editRecipe(0, recipe4);
    recipe4.setName("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    recipe4.setName("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str7);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    int i10 = inventory0.getCoffee();
    int i11 = inventory0.getChocolate();
    inventory0.setCoffee((int)' ');
    int i14 = inventory0.getCoffee();
    inventory0.setChocolate(32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 32);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setMilk((-1));
    int i3 = inventory0.getMilk();
    int i4 = inventory0.getChocolate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 15);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    java.lang.String str6 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Inventory inventory8 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i9 = inventory8.getMilk();
    int i10 = inventory8.getCoffee();
    inventory8.setChocolate((int)(byte)-1);
    int i13 = inventory8.getChocolate();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker14 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker15 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str18 = coffeeMaker15.editRecipe(0, recipe17);
    edu.ncsu.csc326.coffeemaker.Inventory inventory19 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i20 = inventory19.getMilk();
    int i21 = inventory19.getCoffee();
    inventory19.setChocolate((int)(byte)-1);
    inventory19.setCoffee((int)(byte)10);
    int i26 = inventory19.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe27 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b28 = inventory19.useIngredients(recipe27);
    boolean b29 = coffeeMaker15.addRecipe(recipe27);
    edu.ncsu.csc326.coffeemaker.Recipe recipe31 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i32 = recipe31.getPrice();
    int i33 = recipe31.getAmtChocolate();
    java.lang.String str34 = coffeeMaker15.editRecipe(0, recipe31);
    boolean b35 = coffeeMaker14.addRecipe(recipe31);
    int i36 = recipe31.getAmtSugar();
    boolean b37 = inventory8.useIngredients(recipe31);
    int i38 = recipe31.getAmtMilk();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str39 = recipeBook0.editRecipe(15, recipe31);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + ""+ "'", str34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook16 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str18 = recipeBook16.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array19 = recipeBook16.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    int i26 = recipe23.getAmtCoffee();
    boolean b27 = recipeBook16.addRecipe(recipe23);
    recipe23.setName("hi!");
    recipe23.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    boolean b32 = coffeeMaker0.addRecipe(recipe23);
    int i35 = coffeeMaker0.makeCoffee(0, 0);
    java.lang.String str36 = coffeeMaker0.checkInventory();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str36.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    int i10 = inventory0.getCoffee();
    int i11 = inventory0.getChocolate();
    int i12 = inventory0.getMilk();
    java.lang.String str13 = inventory0.toString();
    inventory0.setSugar(15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str13.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    // The following exception was thrown during execution in test generation
    try {
    recipe12.setAmtCoffee("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 10\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    java.lang.String str10 = inventory0.toString();
    inventory0.setMilk((int)(short)0);
    inventory0.setCoffee((int)(short)10);
    int i15 = inventory0.getMilk();
    int i16 = inventory0.getCoffee();
    inventory0.setChocolate((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str10.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 10);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    java.lang.String str10 = inventory0.toString();
    inventory0.setMilk((int)(short)0);
    inventory0.setCoffee((int)(short)10);
    int i15 = inventory0.getMilk();
    int i16 = inventory0.getSugar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str10.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 15);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i1 = recipe0.getPrice();
    java.lang.String str2 = recipe0.toString();
    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException4 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    boolean b5 = recipe0.equals((java.lang.Object)"Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    java.lang.String str2 = inventoryException1.toString();
    java.lang.Throwable[] throwable_array3 = inventoryException1.getSuppressed();
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException5 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("");
    java.lang.Throwable[] throwable_array6 = inventoryException5.getSuppressed();
    inventoryException1.addSuppressed((java.lang.Throwable)inventoryException5);
    java.lang.Throwable[] throwable_array8 = inventoryException5.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"+ "'", str2.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array8);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = inventory0.getChocolate();
    java.lang.String str11 = inventory0.toString();
    int i12 = inventory0.getSugar();
    edu.ncsu.csc326.coffeemaker.Inventory inventory13 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory13.setMilk((-1));
    int i16 = inventory13.getMilk();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker17 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe18 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i19 = recipe18.getPrice();
    int i20 = recipe18.getAmtChocolate();
    int i21 = recipe18.getAmtCoffee();
    boolean b22 = coffeeMaker17.addRecipe(recipe18);
    recipe18.setName("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    boolean b25 = inventory13.useIngredients(recipe18);
    boolean b26 = inventory0.useIngredients(recipe18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str11.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array5 = recipeBook0.getRecipes();
    java.lang.String str7 = recipeBook0.deleteRecipe((int)(short)0);
    edu.ncsu.csc326.coffeemaker.Inventory inventory8 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i9 = inventory8.getMilk();
    int i10 = inventory8.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook11 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str13 = recipeBook11.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe14 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b15 = recipeBook11.addRecipe(recipe14);
    int i16 = recipe14.getAmtCoffee();
    boolean b17 = inventory8.useIngredients(recipe14);
    int i18 = recipe14.getAmtCoffee();
    boolean b19 = recipeBook0.addRecipe(recipe14);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker20 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker21 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str24 = coffeeMaker21.editRecipe(0, recipe23);
    edu.ncsu.csc326.coffeemaker.Inventory inventory25 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i26 = inventory25.getMilk();
    int i27 = inventory25.getCoffee();
    inventory25.setChocolate((int)(byte)-1);
    inventory25.setCoffee((int)(byte)10);
    int i32 = inventory25.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe33 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b34 = inventory25.useIngredients(recipe33);
    boolean b35 = coffeeMaker21.addRecipe(recipe33);
    edu.ncsu.csc326.coffeemaker.Recipe recipe37 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i38 = recipe37.getPrice();
    int i39 = recipe37.getAmtChocolate();
    java.lang.String str40 = coffeeMaker21.editRecipe(0, recipe37);
    boolean b41 = coffeeMaker20.addRecipe(recipe37);
    java.lang.String str42 = coffeeMaker20.checkInventory();
    edu.ncsu.csc326.coffeemaker.Recipe recipe43 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i44 = recipe43.getPrice();
    java.lang.String str45 = recipe43.toString();
    int i46 = recipe43.getPrice();
    int i47 = recipe43.getAmtChocolate();
    java.lang.String str48 = recipe43.toString();
    boolean b49 = coffeeMaker20.addRecipe(recipe43);
    boolean b50 = recipeBook0.addRecipe(recipe43);
    java.lang.String str51 = recipe43.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str42.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + ""+ "'", str48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + ""+ "'", str51.equals(""));

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    int i10 = inventory0.getCoffee();
    int i11 = inventory0.getChocolate();
    int i12 = inventory0.getChocolate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory4.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook7 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str9 = recipeBook7.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe10 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b11 = recipeBook7.addRecipe(recipe10);
    int i12 = recipe10.getAmtCoffee();
    int i13 = recipe10.getAmtCoffee();
    boolean b14 = inventory4.useIngredients(recipe10);
    java.lang.String str15 = recipe10.getName();
    boolean b16 = recipeBook3.addRecipe(recipe10);
    boolean b17 = recipeBook0.addRecipe(recipe10);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker18 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker19 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str22 = coffeeMaker19.editRecipe(0, recipe21);
    edu.ncsu.csc326.coffeemaker.Inventory inventory23 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i24 = inventory23.getMilk();
    int i25 = inventory23.getCoffee();
    inventory23.setChocolate((int)(byte)-1);
    inventory23.setCoffee((int)(byte)10);
    int i30 = inventory23.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe31 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b32 = inventory23.useIngredients(recipe31);
    boolean b33 = coffeeMaker19.addRecipe(recipe31);
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i36 = recipe35.getPrice();
    int i37 = recipe35.getAmtChocolate();
    java.lang.String str38 = coffeeMaker19.editRecipe(0, recipe35);
    boolean b39 = coffeeMaker18.addRecipe(recipe35);
    int i40 = recipe35.getAmtSugar();
    recipe35.setName("");
    boolean b44 = recipe35.equals((java.lang.Object)(-1));
    boolean b45 = recipeBook0.addRecipe(recipe35);
    edu.ncsu.csc326.coffeemaker.Inventory inventory46 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i47 = inventory46.getMilk();
    int i48 = inventory46.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe49 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i50 = recipe49.getPrice();
    int i51 = recipe49.getAmtChocolate();
    int i52 = recipe49.getAmtCoffee();
    int i53 = recipe49.getPrice();
    boolean b54 = inventory46.useIngredients(recipe49);
    boolean b55 = recipe35.equals((java.lang.Object)b54);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker56 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker57 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe59 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str60 = coffeeMaker57.editRecipe(0, recipe59);
    edu.ncsu.csc326.coffeemaker.Inventory inventory61 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i62 = inventory61.getMilk();
    int i63 = inventory61.getCoffee();
    inventory61.setChocolate((int)(byte)-1);
    inventory61.setCoffee((int)(byte)10);
    int i68 = inventory61.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe69 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b70 = inventory61.useIngredients(recipe69);
    boolean b71 = coffeeMaker57.addRecipe(recipe69);
    edu.ncsu.csc326.coffeemaker.Recipe recipe73 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i74 = recipe73.getPrice();
    int i75 = recipe73.getAmtChocolate();
    java.lang.String str76 = coffeeMaker57.editRecipe(0, recipe73);
    boolean b77 = coffeeMaker56.addRecipe(recipe73);
    int i78 = recipe73.getAmtSugar();
    int i79 = recipe73.getAmtChocolate();
    boolean b80 = recipe35.equals((java.lang.Object)recipe73);
    // The following exception was thrown during execution in test generation
    try {
    recipe35.setAmtMilk("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 10\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + ""+ "'", str76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    inventory0.setChocolate(100);
    inventory0.setChocolate((int)(short)0);
    int i7 = inventory0.getChocolate();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i9 = recipe8.getPrice();
    int i10 = recipe8.getAmtChocolate();
    boolean b11 = inventory0.useIngredients(recipe8);
    recipe8.setName("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    // The following exception was thrown during execution in test generation
    try {
    recipe8.setAmtSugar("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    int i5 = recipe3.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory6 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i7 = inventory6.getMilk();
    int i8 = inventory6.getCoffee();
    inventory6.setChocolate((int)(byte)-1);
    int i11 = inventory6.getChocolate();
    boolean b12 = recipe3.equals((java.lang.Object)inventory6);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook13 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str15 = recipeBook13.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook16 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory17 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory17.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    int i26 = recipe23.getAmtCoffee();
    boolean b27 = inventory17.useIngredients(recipe23);
    java.lang.String str28 = recipe23.getName();
    boolean b29 = recipeBook16.addRecipe(recipe23);
    boolean b30 = recipeBook13.addRecipe(recipe23);
    boolean b31 = inventory6.useIngredients(recipe23);
    // The following exception was thrown during execution in test generation
    try {
    inventory6.addMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    inventory0.setCoffee(1);
    inventory0.setCoffee((int)(byte)10);
    int i15 = inventory0.getMilk();
    inventory0.setCoffee((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 15);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    edu.ncsu.csc326.coffeemaker.Recipe recipe16 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i17 = recipe16.getPrice();
    int i18 = recipe16.getAmtChocolate();
    java.lang.String str19 = coffeeMaker0.editRecipe(0, recipe16);
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 10\n", "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n", "", "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + ""+ "'", str19.equals(""));

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    java.lang.String str22 = coffeeMaker0.checkInventory();
    java.lang.String str23 = coffeeMaker0.checkInventory();
    java.lang.String str24 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook25 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str27 = recipeBook25.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array28 = recipeBook25.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook29 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str31 = recipeBook29.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe32 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b33 = recipeBook29.addRecipe(recipe32);
    int i34 = recipe32.getAmtCoffee();
    int i35 = recipe32.getAmtCoffee();
    boolean b36 = recipeBook25.addRecipe(recipe32);
    recipe32.setName("hi!");
    java.lang.String str39 = recipe32.toString();
    java.lang.String str40 = recipe32.toString();
    java.lang.String str41 = recipe32.getName();
    boolean b42 = coffeeMaker0.addRecipe(recipe32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str22.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str23.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str24.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "hi!"+ "'", str39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "hi!"+ "'", str40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "hi!"+ "'", str41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe8 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b9 = inventory0.useIngredients(recipe8);
    int i10 = inventory0.getCoffee();
    int i11 = inventory0.getChocolate();
    int i12 = inventory0.getMilk();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addMilk("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    inventory0.setChocolate(100);
    inventory0.setMilk((int)(byte)1);
    inventory0.setChocolate((-1));

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    inventory0.setSugar((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook17 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory18.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook21 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str23 = recipeBook21.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe24 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b25 = recipeBook21.addRecipe(recipe24);
    int i26 = recipe24.getAmtCoffee();
    int i27 = recipe24.getAmtCoffee();
    boolean b28 = inventory18.useIngredients(recipe24);
    java.lang.String str29 = recipe24.getName();
    boolean b30 = recipeBook17.addRecipe(recipe24);
    boolean b31 = coffeeMaker0.addRecipe(recipe24);
    java.lang.String str32 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker33 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str36 = coffeeMaker33.editRecipe(0, recipe35);
    edu.ncsu.csc326.coffeemaker.Inventory inventory37 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i38 = inventory37.getMilk();
    int i39 = inventory37.getCoffee();
    inventory37.setChocolate((int)(byte)-1);
    inventory37.setCoffee((int)(byte)10);
    int i44 = inventory37.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe45 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b46 = inventory37.useIngredients(recipe45);
    boolean b47 = coffeeMaker33.addRecipe(recipe45);
    java.lang.String str48 = coffeeMaker33.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook49 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str51 = recipeBook49.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array52 = recipeBook49.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook53 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str55 = recipeBook53.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe56 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b57 = recipeBook53.addRecipe(recipe56);
    int i58 = recipe56.getAmtCoffee();
    int i59 = recipe56.getAmtCoffee();
    boolean b60 = recipeBook49.addRecipe(recipe56);
    recipe56.setName("hi!");
    recipe56.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    boolean b65 = coffeeMaker33.addRecipe(recipe56);
    edu.ncsu.csc326.coffeemaker.Recipe recipe66 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i67 = recipe66.getPrice();
    java.lang.String str68 = recipe66.toString();
    boolean b69 = coffeeMaker33.addRecipe(recipe66);
    boolean b70 = coffeeMaker0.addRecipe(recipe66);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str72 = coffeeMaker0.deleteRecipe(10);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str32.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str48.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + ""+ "'", str68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = recipe6.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory11 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i12 = inventory11.getMilk();
    int i13 = inventory11.getCoffee();
    inventory11.setChocolate((int)(byte)-1);
    inventory11.setCoffee((int)(byte)10);
    int i18 = inventory11.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe19 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b20 = inventory11.useIngredients(recipe19);
    int i21 = inventory11.getCoffee();
    int i22 = inventory11.getChocolate();
    inventory11.setCoffee((int)' ');
    int i25 = inventory11.getCoffee();
    boolean b26 = recipe6.equals((java.lang.Object)inventory11);
    recipe6.setName("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    edu.ncsu.csc326.coffeemaker.Inventory inventory29 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i30 = inventory29.getMilk();
    int i31 = inventory29.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook32 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str34 = recipeBook32.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b36 = recipeBook32.addRecipe(recipe35);
    int i37 = recipe35.getAmtCoffee();
    boolean b38 = inventory29.useIngredients(recipe35);
    int i39 = inventory29.getChocolate();
    java.lang.String str40 = inventory29.toString();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook41 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str43 = recipeBook41.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe44 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b45 = recipeBook41.addRecipe(recipe44);
    int i46 = recipe44.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory47 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i48 = inventory47.getMilk();
    int i49 = inventory47.getCoffee();
    inventory47.setChocolate((int)(byte)-1);
    int i52 = inventory47.getChocolate();
    boolean b53 = recipe44.equals((java.lang.Object)inventory47);
    boolean b54 = inventory29.useIngredients(recipe44);
    int i55 = inventory29.getMilk();
    boolean b56 = recipe6.equals((java.lang.Object)inventory29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str40.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n", "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n", "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!", "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array5 = recipeBook0.getRecipes();
    java.lang.String str7 = recipeBook0.deleteRecipe((int)(short)0);
    edu.ncsu.csc326.coffeemaker.Inventory inventory8 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i9 = inventory8.getMilk();
    int i10 = inventory8.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook11 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str13 = recipeBook11.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe14 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b15 = recipeBook11.addRecipe(recipe14);
    int i16 = recipe14.getAmtCoffee();
    boolean b17 = inventory8.useIngredients(recipe14);
    int i18 = recipe14.getAmtCoffee();
    boolean b19 = recipeBook0.addRecipe(recipe14);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker20 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker21 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str24 = coffeeMaker21.editRecipe(0, recipe23);
    edu.ncsu.csc326.coffeemaker.Inventory inventory25 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i26 = inventory25.getMilk();
    int i27 = inventory25.getCoffee();
    inventory25.setChocolate((int)(byte)-1);
    inventory25.setCoffee((int)(byte)10);
    int i32 = inventory25.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe33 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b34 = inventory25.useIngredients(recipe33);
    boolean b35 = coffeeMaker21.addRecipe(recipe33);
    edu.ncsu.csc326.coffeemaker.Recipe recipe37 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i38 = recipe37.getPrice();
    int i39 = recipe37.getAmtChocolate();
    java.lang.String str40 = coffeeMaker21.editRecipe(0, recipe37);
    boolean b41 = coffeeMaker20.addRecipe(recipe37);
    java.lang.String str42 = coffeeMaker20.checkInventory();
    edu.ncsu.csc326.coffeemaker.Recipe recipe43 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i44 = recipe43.getPrice();
    java.lang.String str45 = recipe43.toString();
    int i46 = recipe43.getPrice();
    int i47 = recipe43.getAmtChocolate();
    java.lang.String str48 = recipe43.toString();
    boolean b49 = coffeeMaker20.addRecipe(recipe43);
    boolean b50 = recipeBook0.addRecipe(recipe43);
    // The following exception was thrown during execution in test generation
    try {
    recipe43.setAmtCoffee("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str42.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + ""+ "'", str48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i1 = recipe0.getPrice();
    java.lang.String str2 = recipe0.toString();
    int i3 = recipe0.getPrice();
    int i4 = recipe0.getAmtChocolate();
    int i5 = recipe0.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    recipe0.setAmtSugar("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("hi!");
    java.lang.Throwable[] throwable_array2 = recipeException1.getSuppressed();
    java.lang.String str3 = recipeException1.toString();
    java.lang.Throwable throwable4 = null;
    // The following exception was thrown during execution in test generation
    try {
    recipeException1.addSuppressed(throwable4);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!"+ "'", str3.equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!"));

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = recipe6.getPrice();
    int i11 = recipe6.getAmtSugar();
    int i12 = recipe6.getPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("hi!");
    java.lang.String str2 = recipeException1.toString();
    java.lang.String str3 = recipeException1.toString();
    java.lang.Throwable[] throwable_array4 = recipeException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!"+ "'", str2.equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!"+ "'", str3.equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array4);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    java.lang.String str2 = inventory0.toString();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str2.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array5 = recipeBook0.getRecipes();
    java.lang.String str7 = recipeBook0.deleteRecipe((int)(short)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array8 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Recipe recipe9 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i10 = recipe9.getPrice();
    java.lang.String str11 = recipe9.toString();
    int i12 = recipe9.getPrice();
    int i13 = recipe9.getAmtChocolate();
    java.lang.String str14 = recipe9.toString();
    boolean b15 = recipeBook0.addRecipe(recipe9);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str17 = recipeBook0.deleteRecipe((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory4.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook7 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str9 = recipeBook7.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe10 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b11 = recipeBook7.addRecipe(recipe10);
    int i12 = recipe10.getAmtCoffee();
    int i13 = recipe10.getAmtCoffee();
    boolean b14 = inventory4.useIngredients(recipe10);
    java.lang.String str15 = recipe10.getName();
    boolean b16 = recipeBook3.addRecipe(recipe10);
    boolean b17 = recipeBook0.addRecipe(recipe10);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker18 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker19 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str22 = coffeeMaker19.editRecipe(0, recipe21);
    edu.ncsu.csc326.coffeemaker.Inventory inventory23 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i24 = inventory23.getMilk();
    int i25 = inventory23.getCoffee();
    inventory23.setChocolate((int)(byte)-1);
    inventory23.setCoffee((int)(byte)10);
    int i30 = inventory23.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe31 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b32 = inventory23.useIngredients(recipe31);
    boolean b33 = coffeeMaker19.addRecipe(recipe31);
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i36 = recipe35.getPrice();
    int i37 = recipe35.getAmtChocolate();
    java.lang.String str38 = coffeeMaker19.editRecipe(0, recipe35);
    boolean b39 = coffeeMaker18.addRecipe(recipe35);
    int i40 = recipe35.getAmtSugar();
    recipe35.setName("");
    boolean b44 = recipe35.equals((java.lang.Object)(-1));
    boolean b45 = recipeBook0.addRecipe(recipe35);
    edu.ncsu.csc326.coffeemaker.Inventory inventory46 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i47 = inventory46.getMilk();
    int i48 = inventory46.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe49 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i50 = recipe49.getPrice();
    int i51 = recipe49.getAmtChocolate();
    int i52 = recipe49.getAmtCoffee();
    int i53 = recipe49.getPrice();
    boolean b54 = inventory46.useIngredients(recipe49);
    boolean b55 = recipe35.equals((java.lang.Object)b54);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker56 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker57 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe59 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str60 = coffeeMaker57.editRecipe(0, recipe59);
    edu.ncsu.csc326.coffeemaker.Inventory inventory61 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i62 = inventory61.getMilk();
    int i63 = inventory61.getCoffee();
    inventory61.setChocolate((int)(byte)-1);
    inventory61.setCoffee((int)(byte)10);
    int i68 = inventory61.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe69 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b70 = inventory61.useIngredients(recipe69);
    boolean b71 = coffeeMaker57.addRecipe(recipe69);
    edu.ncsu.csc326.coffeemaker.Recipe recipe73 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i74 = recipe73.getPrice();
    int i75 = recipe73.getAmtChocolate();
    java.lang.String str76 = coffeeMaker57.editRecipe(0, recipe73);
    boolean b77 = coffeeMaker56.addRecipe(recipe73);
    int i78 = recipe73.getAmtSugar();
    int i79 = recipe73.getAmtChocolate();
    boolean b80 = recipe35.equals((java.lang.Object)recipe73);
    // The following exception was thrown during execution in test generation
    try {
    recipe73.setAmtChocolate("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + ""+ "'", str76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test368"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    java.lang.Throwable[] throwable_array2 = inventoryException1.getSuppressed();
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException4 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    inventoryException1.addSuppressed((java.lang.Throwable)inventoryException4);
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException7 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("");
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException9 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    java.lang.String str10 = inventoryException9.toString();
    inventoryException7.addSuppressed((java.lang.Throwable)inventoryException9);
    inventoryException4.addSuppressed((java.lang.Throwable)inventoryException9);
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException14 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    java.lang.Throwable[] throwable_array15 = inventoryException14.getSuppressed();
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException17 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    inventoryException14.addSuppressed((java.lang.Throwable)inventoryException17);
    inventoryException9.addSuppressed((java.lang.Throwable)inventoryException17);
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException21 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    inventoryException17.addSuppressed((java.lang.Throwable)inventoryException21);
    java.lang.Throwable[] throwable_array23 = inventoryException21.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"+ "'", str10.equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array23);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test369"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    int i5 = inventory0.getChocolate();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker6 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker7 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe9 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str10 = coffeeMaker7.editRecipe(0, recipe9);
    edu.ncsu.csc326.coffeemaker.Inventory inventory11 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i12 = inventory11.getMilk();
    int i13 = inventory11.getCoffee();
    inventory11.setChocolate((int)(byte)-1);
    inventory11.setCoffee((int)(byte)10);
    int i18 = inventory11.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe19 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b20 = inventory11.useIngredients(recipe19);
    boolean b21 = coffeeMaker7.addRecipe(recipe19);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i24 = recipe23.getPrice();
    int i25 = recipe23.getAmtChocolate();
    java.lang.String str26 = coffeeMaker7.editRecipe(0, recipe23);
    boolean b27 = coffeeMaker6.addRecipe(recipe23);
    int i28 = recipe23.getAmtSugar();
    boolean b29 = inventory0.useIngredients(recipe23);
    int i30 = recipe23.getAmtSugar();
    // The following exception was thrown during execution in test generation
    try {
    recipe23.setAmtCoffee("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test370"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    int i23 = recipe17.getAmtChocolate();
    int i24 = recipe17.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory25 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i26 = inventory25.getMilk();
    int i27 = inventory25.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook28 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str30 = recipeBook28.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe31 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b32 = recipeBook28.addRecipe(recipe31);
    int i33 = recipe31.getAmtCoffee();
    boolean b34 = inventory25.useIngredients(recipe31);
    int i35 = recipe31.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory36 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i37 = inventory36.getMilk();
    int i38 = inventory36.getCoffee();
    inventory36.setChocolate((int)(byte)-1);
    inventory36.setCoffee((int)(byte)10);
    int i43 = inventory36.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe44 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b45 = inventory36.useIngredients(recipe44);
    int i46 = inventory36.getCoffee();
    int i47 = inventory36.getChocolate();
    inventory36.setCoffee((int)' ');
    int i50 = inventory36.getCoffee();
    boolean b51 = recipe31.equals((java.lang.Object)inventory36);
    boolean b52 = recipe17.equals((java.lang.Object)b51);
    int i53 = recipe17.getAmtSugar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test371"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 10\n");
    java.lang.Throwable[] throwable_array2 = inventoryException1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array2);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test372"); }


    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException1 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("hi!");
    edu.ncsu.csc326.coffeemaker.exceptions.RecipeException recipeException3 = new edu.ncsu.csc326.coffeemaker.exceptions.RecipeException("hi!");
    java.lang.Throwable[] throwable_array4 = recipeException3.getSuppressed();
    recipeException1.addSuppressed((java.lang.Throwable)recipeException3);
    java.lang.Throwable[] throwable_array6 = recipeException3.getSuppressed();
    java.lang.Throwable[] throwable_array7 = recipeException3.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array7);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test373"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    recipe3.setName("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: hi!");
    int i7 = recipe3.getPrice();
    // The following exception was thrown during execution in test generation
    try {
    recipe3.setPrice("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test374"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    boolean b10 = recipeBook0.addRecipe(recipe7);
    java.lang.String str11 = recipe7.getName();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test375"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    int i5 = inventory0.getChocolate();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker6 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker7 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe9 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str10 = coffeeMaker7.editRecipe(0, recipe9);
    edu.ncsu.csc326.coffeemaker.Inventory inventory11 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i12 = inventory11.getMilk();
    int i13 = inventory11.getCoffee();
    inventory11.setChocolate((int)(byte)-1);
    inventory11.setCoffee((int)(byte)10);
    int i18 = inventory11.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe19 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b20 = inventory11.useIngredients(recipe19);
    boolean b21 = coffeeMaker7.addRecipe(recipe19);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i24 = recipe23.getPrice();
    int i25 = recipe23.getAmtChocolate();
    java.lang.String str26 = coffeeMaker7.editRecipe(0, recipe23);
    boolean b27 = coffeeMaker6.addRecipe(recipe23);
    int i28 = recipe23.getAmtSugar();
    boolean b29 = inventory0.useIngredients(recipe23);
    java.lang.String str30 = recipe23.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test376"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getSugar();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker3 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe5 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str6 = coffeeMaker3.editRecipe(0, recipe5);
    edu.ncsu.csc326.coffeemaker.Inventory inventory7 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i8 = inventory7.getMilk();
    int i9 = inventory7.getCoffee();
    inventory7.setChocolate((int)(byte)-1);
    inventory7.setCoffee((int)(byte)10);
    int i14 = inventory7.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe15 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b16 = inventory7.useIngredients(recipe15);
    boolean b17 = coffeeMaker3.addRecipe(recipe15);
    java.lang.String str18 = coffeeMaker3.checkInventory();
    java.lang.String str19 = coffeeMaker3.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory21 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory21.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook24 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str26 = recipeBook24.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe27 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b28 = recipeBook24.addRecipe(recipe27);
    int i29 = recipe27.getAmtCoffee();
    int i30 = recipe27.getAmtCoffee();
    boolean b31 = inventory21.useIngredients(recipe27);
    java.lang.String str32 = recipe27.getName();
    boolean b33 = recipeBook20.addRecipe(recipe27);
    boolean b34 = coffeeMaker3.addRecipe(recipe27);
    recipe27.setName("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
    boolean b37 = inventory0.useIngredients(recipe27);
    inventory0.setChocolate((-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str18.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str19.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test377"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i1 = recipe0.getPrice();
    java.lang.String str2 = recipe0.toString();
    int i3 = recipe0.getPrice();
    int i4 = recipe0.getAmtCoffee();
    int i5 = recipe0.getPrice();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test378"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    inventory0.setSugar((int)(byte)10);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test379"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    java.lang.String str3 = inventory0.toString();
    inventory0.setChocolate((-1));
    inventory0.setCoffee((-1));
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str3.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test380"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory4.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook7 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str9 = recipeBook7.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe10 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b11 = recipeBook7.addRecipe(recipe10);
    int i12 = recipe10.getAmtCoffee();
    int i13 = recipe10.getAmtCoffee();
    boolean b14 = inventory4.useIngredients(recipe10);
    java.lang.String str15 = recipe10.getName();
    boolean b16 = recipeBook3.addRecipe(recipe10);
    boolean b17 = recipeBook0.addRecipe(recipe10);
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i19 = inventory18.getMilk();
    int i20 = inventory18.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i22 = recipe21.getPrice();
    int i23 = recipe21.getAmtChocolate();
    int i24 = recipe21.getAmtCoffee();
    int i25 = recipe21.getPrice();
    boolean b26 = inventory18.useIngredients(recipe21);
    int i27 = inventory18.getSugar();
    boolean b28 = recipe10.equals((java.lang.Object)i27);
    int i29 = recipe10.getAmtMilk();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test381"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    int i5 = recipe3.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory6 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i7 = inventory6.getMilk();
    int i8 = inventory6.getCoffee();
    inventory6.setChocolate((int)(byte)-1);
    int i11 = inventory6.getChocolate();
    boolean b12 = recipe3.equals((java.lang.Object)inventory6);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook13 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str15 = recipeBook13.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook16 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory17 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory17.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    int i26 = recipe23.getAmtCoffee();
    boolean b27 = inventory17.useIngredients(recipe23);
    java.lang.String str28 = recipe23.getName();
    boolean b29 = recipeBook16.addRecipe(recipe23);
    boolean b30 = recipeBook13.addRecipe(recipe23);
    boolean b31 = inventory6.useIngredients(recipe23);
    inventory6.setChocolate((int)'4');
    inventory6.setChocolate((int)(short)10);
    java.lang.String str36 = inventory6.toString();
    inventory6.setCoffee((int)'4');
    // The following exception was thrown during execution in test generation
    try {
    inventory6.addChocolate("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 10\n"+ "'", str36.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 10\n"));

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test382"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    int i5 = recipe3.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory6 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i7 = inventory6.getMilk();
    int i8 = inventory6.getCoffee();
    inventory6.setChocolate((int)(byte)-1);
    int i11 = inventory6.getChocolate();
    boolean b12 = recipe3.equals((java.lang.Object)inventory6);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook13 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str15 = recipeBook13.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook16 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory17 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory17.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    int i26 = recipe23.getAmtCoffee();
    boolean b27 = inventory17.useIngredients(recipe23);
    java.lang.String str28 = recipe23.getName();
    boolean b29 = recipeBook16.addRecipe(recipe23);
    boolean b30 = recipeBook13.addRecipe(recipe23);
    boolean b31 = inventory6.useIngredients(recipe23);
    inventory6.setChocolate((int)'4');
    inventory6.setCoffee((int)(short)-1);
    inventory6.setChocolate((int)(byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + ""+ "'", str28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test383"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array5 = recipeBook0.getRecipes();
    java.lang.String str7 = recipeBook0.deleteRecipe((int)(short)0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook8 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str10 = recipeBook8.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i13 = recipe12.getPrice();
    int i14 = recipe12.getAmtChocolate();
    java.lang.String str15 = recipeBook8.editRecipe(0, recipe12);
    boolean b16 = recipeBook0.addRecipe(recipe12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test384"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = inventory0.getChocolate();
    java.lang.String str11 = inventory0.toString();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook12 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str14 = recipeBook12.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe15 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b16 = recipeBook12.addRecipe(recipe15);
    int i17 = recipe15.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i19 = inventory18.getMilk();
    int i20 = inventory18.getCoffee();
    inventory18.setChocolate((int)(byte)-1);
    int i23 = inventory18.getChocolate();
    boolean b24 = recipe15.equals((java.lang.Object)inventory18);
    boolean b25 = inventory0.useIngredients(recipe15);
    int i26 = inventory0.getMilk();
    inventory0.setSugar((int)(byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str11.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 15);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test385"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getCoffee();
    inventory0.setChocolate((int)'a');
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 10);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test386"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook17 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory18.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook21 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str23 = recipeBook21.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe24 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b25 = recipeBook21.addRecipe(recipe24);
    int i26 = recipe24.getAmtCoffee();
    int i27 = recipe24.getAmtCoffee();
    boolean b28 = inventory18.useIngredients(recipe24);
    java.lang.String str29 = recipe24.getName();
    boolean b30 = recipeBook17.addRecipe(recipe24);
    boolean b31 = coffeeMaker0.addRecipe(recipe24);
    recipe24.setName("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
    int i34 = recipe24.getAmtChocolate();
    // The following exception was thrown during execution in test generation
    try {
    recipe24.setAmtChocolate("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test387"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array5 = recipeBook0.getRecipes();
    java.lang.String str7 = recipeBook0.deleteRecipe((int)(short)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array8 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.Recipe recipe9 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i10 = recipe9.getPrice();
    java.lang.String str11 = recipe9.toString();
    int i12 = recipe9.getPrice();
    int i13 = recipe9.getAmtChocolate();
    java.lang.String str14 = recipe9.toString();
    boolean b15 = recipeBook0.addRecipe(recipe9);
    int i16 = recipe9.getAmtMilk();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + ""+ "'", str7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test388"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    int i5 = recipe3.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory6 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i7 = inventory6.getMilk();
    int i8 = inventory6.getCoffee();
    inventory6.setChocolate((int)(byte)-1);
    int i11 = inventory6.getChocolate();
    boolean b12 = recipe3.equals((java.lang.Object)inventory6);
    java.lang.String str13 = recipe3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + ""+ "'", str13.equals(""));

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test389"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    int i5 = inventory0.getChocolate();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker6 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker7 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe9 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str10 = coffeeMaker7.editRecipe(0, recipe9);
    edu.ncsu.csc326.coffeemaker.Inventory inventory11 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i12 = inventory11.getMilk();
    int i13 = inventory11.getCoffee();
    inventory11.setChocolate((int)(byte)-1);
    inventory11.setCoffee((int)(byte)10);
    int i18 = inventory11.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe19 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b20 = inventory11.useIngredients(recipe19);
    boolean b21 = coffeeMaker7.addRecipe(recipe19);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i24 = recipe23.getPrice();
    int i25 = recipe23.getAmtChocolate();
    java.lang.String str26 = coffeeMaker7.editRecipe(0, recipe23);
    boolean b27 = coffeeMaker6.addRecipe(recipe23);
    int i28 = recipe23.getAmtSugar();
    boolean b29 = inventory0.useIngredients(recipe23);
    int i30 = recipe23.getAmtChocolate();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test390"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    java.lang.String str11 = recipe6.getName();
    // The following exception was thrown during execution in test generation
    try {
    recipe6.setAmtSugar("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + ""+ "'", str11.equals(""));

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test391"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    java.lang.String str22 = coffeeMaker0.checkInventory();
    java.lang.String str23 = coffeeMaker0.checkInventory();
    java.lang.String str24 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array25 = coffeeMaker0.getRecipes();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str22.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str23.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str24.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array25);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test392"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    boolean b9 = inventory0.useIngredients(recipe6);
    int i10 = inventory0.getChocolate();
    java.lang.String str11 = inventory0.toString();
    int i12 = inventory0.getSugar();
    inventory0.setCoffee((int)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str11.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test393"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i8 = recipe7.getPrice();
    int i9 = recipe7.getAmtChocolate();
    java.lang.String str10 = recipeBook3.editRecipe(0, recipe7);
    boolean b11 = recipeBook0.addRecipe(recipe7);
    // The following exception was thrown during execution in test generation
    try {
    recipe7.setAmtMilk("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException: Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test394"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook16 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str18 = recipeBook16.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array19 = recipeBook16.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    int i26 = recipe23.getAmtCoffee();
    boolean b27 = recipeBook16.addRecipe(recipe23);
    boolean b28 = coffeeMaker0.addRecipe(recipe23);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook29 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory30 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory30.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook33 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str35 = recipeBook33.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe36 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b37 = recipeBook33.addRecipe(recipe36);
    int i38 = recipe36.getAmtCoffee();
    int i39 = recipe36.getAmtCoffee();
    boolean b40 = inventory30.useIngredients(recipe36);
    java.lang.String str41 = recipe36.getName();
    boolean b42 = recipeBook29.addRecipe(recipe36);
    int i43 = recipe36.getAmtSugar();
    boolean b44 = coffeeMaker0.addRecipe(recipe36);
    java.lang.String str45 = coffeeMaker0.checkInventory();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + ""+ "'", str41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str45.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test395"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook16 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str18 = recipeBook16.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array19 = recipeBook16.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    int i26 = recipe23.getAmtCoffee();
    boolean b27 = recipeBook16.addRecipe(recipe23);
    recipe23.setName("hi!");
    recipe23.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    boolean b32 = coffeeMaker0.addRecipe(recipe23);
    edu.ncsu.csc326.coffeemaker.Recipe recipe33 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i34 = recipe33.getPrice();
    java.lang.String str35 = recipe33.toString();
    boolean b36 = coffeeMaker0.addRecipe(recipe33);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook37 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str39 = recipeBook37.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array40 = recipeBook37.getRecipes();
    edu.ncsu.csc326.coffeemaker.Inventory inventory42 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory42.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook45 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str47 = recipeBook45.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe48 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b49 = recipeBook45.addRecipe(recipe48);
    int i50 = recipe48.getAmtCoffee();
    int i51 = recipe48.getAmtCoffee();
    boolean b52 = inventory42.useIngredients(recipe48);
    java.lang.String str53 = recipe48.getName();
    java.lang.String str54 = recipeBook37.editRecipe((int)(short)0, recipe48);
    int i55 = recipe48.getAmtMilk();
    java.lang.String str56 = recipe48.toString();
    boolean b57 = recipe33.equals((java.lang.Object)str56);
    java.lang.String str58 = recipe33.getName();
    // The following exception was thrown during execution in test generation
    try {
    recipe33.setAmtChocolate("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + ""+ "'", str53.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + ""+ "'", str56.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + ""+ "'", str58.equals(""));

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test396"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook17 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory18.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook21 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str23 = recipeBook21.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe24 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b25 = recipeBook21.addRecipe(recipe24);
    int i26 = recipe24.getAmtCoffee();
    int i27 = recipe24.getAmtCoffee();
    boolean b28 = inventory18.useIngredients(recipe24);
    java.lang.String str29 = recipe24.getName();
    boolean b30 = recipeBook17.addRecipe(recipe24);
    boolean b31 = coffeeMaker0.addRecipe(recipe24);
    java.lang.String str32 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker33 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str36 = coffeeMaker33.editRecipe(0, recipe35);
    edu.ncsu.csc326.coffeemaker.Inventory inventory37 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i38 = inventory37.getMilk();
    int i39 = inventory37.getCoffee();
    inventory37.setChocolate((int)(byte)-1);
    inventory37.setCoffee((int)(byte)10);
    int i44 = inventory37.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe45 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b46 = inventory37.useIngredients(recipe45);
    boolean b47 = coffeeMaker33.addRecipe(recipe45);
    java.lang.String str48 = coffeeMaker33.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook49 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str51 = recipeBook49.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array52 = recipeBook49.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook53 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str55 = recipeBook53.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe56 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b57 = recipeBook53.addRecipe(recipe56);
    int i58 = recipe56.getAmtCoffee();
    int i59 = recipe56.getAmtCoffee();
    boolean b60 = recipeBook49.addRecipe(recipe56);
    recipe56.setName("hi!");
    recipe56.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    boolean b65 = coffeeMaker33.addRecipe(recipe56);
    edu.ncsu.csc326.coffeemaker.Recipe recipe66 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i67 = recipe66.getPrice();
    java.lang.String str68 = recipe66.toString();
    boolean b69 = coffeeMaker33.addRecipe(recipe66);
    boolean b70 = coffeeMaker0.addRecipe(recipe66);
    // The following exception was thrown during execution in test generation
    try {
    coffeeMaker0.addInventory("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!", "Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n", "hi!", "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str32.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str48.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + ""+ "'", str68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test397"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str5 = recipeBook3.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe6 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b7 = recipeBook3.addRecipe(recipe6);
    int i8 = recipe6.getAmtCoffee();
    int i9 = recipe6.getAmtCoffee();
    boolean b10 = inventory0.useIngredients(recipe6);
    inventory0.setCoffee(1);
    int i13 = inventory0.getCoffee();
    int i14 = inventory0.getMilk();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 15);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test398"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    java.lang.String str2 = inventory0.toString();
    inventory0.setMilk(15);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addChocolate("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str2.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test399"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.Inventory inventory17 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i18 = inventory17.getMilk();
    int i19 = inventory17.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    boolean b26 = inventory17.useIngredients(recipe23);
    int i27 = recipe23.getPrice();
    boolean b28 = coffeeMaker0.addRecipe(recipe23);
    // The following exception was thrown during execution in test generation
    try {
    int i31 = coffeeMaker0.makeCoffee((int)(short)-1, 1);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test400"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(byte)-1);
    inventory0.setCoffee((int)(byte)10);
    int i7 = inventory0.getSugar();
    int i8 = inventory0.getMilk();
    inventory0.setMilk(0);
    int i11 = inventory0.getSugar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 15);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test401"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    java.lang.String str22 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook24 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str26 = recipeBook24.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe27 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b28 = recipeBook24.addRecipe(recipe27);
    int i29 = recipe27.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory30 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i31 = inventory30.getMilk();
    int i32 = inventory30.getCoffee();
    inventory30.setChocolate((int)(byte)-1);
    int i35 = inventory30.getChocolate();
    boolean b36 = recipe27.equals((java.lang.Object)inventory30);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook37 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str39 = recipeBook37.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook40 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory41 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory41.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook44 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str46 = recipeBook44.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe47 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b48 = recipeBook44.addRecipe(recipe47);
    int i49 = recipe47.getAmtCoffee();
    int i50 = recipe47.getAmtCoffee();
    boolean b51 = inventory41.useIngredients(recipe47);
    java.lang.String str52 = recipe47.getName();
    boolean b53 = recipeBook40.addRecipe(recipe47);
    boolean b54 = recipeBook37.addRecipe(recipe47);
    boolean b55 = inventory30.useIngredients(recipe47);
    edu.ncsu.csc326.coffeemaker.Inventory inventory56 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i57 = inventory56.getMilk();
    int i58 = inventory56.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook59 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str61 = recipeBook59.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe62 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b63 = recipeBook59.addRecipe(recipe62);
    int i64 = recipe62.getAmtCoffee();
    boolean b65 = inventory56.useIngredients(recipe62);
    int i66 = inventory56.getChocolate();
    java.lang.String str67 = inventory56.toString();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook68 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str70 = recipeBook68.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe71 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b72 = recipeBook68.addRecipe(recipe71);
    int i73 = recipe71.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory74 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i75 = inventory74.getMilk();
    int i76 = inventory74.getCoffee();
    inventory74.setChocolate((int)(byte)-1);
    int i79 = inventory74.getChocolate();
    boolean b80 = recipe71.equals((java.lang.Object)inventory74);
    boolean b81 = inventory56.useIngredients(recipe71);
    int i82 = inventory56.getMilk();
    boolean b83 = recipe47.equals((java.lang.Object)i82);
    java.lang.String str84 = coffeeMaker0.editRecipe((int)(byte)1, recipe47);
    edu.ncsu.csc326.coffeemaker.Inventory inventory86 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i87 = inventory86.getMilk();
    int i88 = inventory86.getCoffee();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook89 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str91 = recipeBook89.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe92 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b93 = recipeBook89.addRecipe(recipe92);
    int i94 = recipe92.getAmtCoffee();
    boolean b95 = inventory86.useIngredients(recipe92);
    int i96 = recipe92.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str97 = coffeeMaker0.editRecipe(32, recipe92);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str22.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + ""+ "'", str52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str67.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i96 == 0);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test402"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook3 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory4.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook7 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str9 = recipeBook7.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe10 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b11 = recipeBook7.addRecipe(recipe10);
    int i12 = recipe10.getAmtCoffee();
    int i13 = recipe10.getAmtCoffee();
    boolean b14 = inventory4.useIngredients(recipe10);
    java.lang.String str15 = recipe10.getName();
    boolean b16 = recipeBook3.addRecipe(recipe10);
    boolean b17 = recipeBook0.addRecipe(recipe10);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker18 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker19 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe21 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str22 = coffeeMaker19.editRecipe(0, recipe21);
    edu.ncsu.csc326.coffeemaker.Inventory inventory23 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i24 = inventory23.getMilk();
    int i25 = inventory23.getCoffee();
    inventory23.setChocolate((int)(byte)-1);
    inventory23.setCoffee((int)(byte)10);
    int i30 = inventory23.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe31 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b32 = inventory23.useIngredients(recipe31);
    boolean b33 = coffeeMaker19.addRecipe(recipe31);
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i36 = recipe35.getPrice();
    int i37 = recipe35.getAmtChocolate();
    java.lang.String str38 = coffeeMaker19.editRecipe(0, recipe35);
    boolean b39 = coffeeMaker18.addRecipe(recipe35);
    int i40 = recipe35.getAmtSugar();
    recipe35.setName("");
    boolean b44 = recipe35.equals((java.lang.Object)(-1));
    boolean b45 = recipeBook0.addRecipe(recipe35);
    int i46 = recipe35.getAmtCoffee();
    // The following exception was thrown during execution in test generation
    try {
    recipe35.setAmtSugar("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test403"); }


    edu.ncsu.csc326.coffeemaker.Recipe recipe0 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i1 = recipe0.getPrice();
    java.lang.String str2 = recipe0.toString();
    int i3 = recipe0.getPrice();
    int i4 = recipe0.getAmtChocolate();
    java.lang.String str5 = recipe0.toString();
    java.lang.String str6 = recipe0.getName();
    edu.ncsu.csc326.coffeemaker.Inventory inventory7 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i8 = inventory7.getMilk();
    int i9 = inventory7.getCoffee();
    inventory7.setChocolate((int)(byte)-1);
    inventory7.setCoffee((int)(byte)10);
    int i14 = inventory7.getSugar();
    int i15 = inventory7.getMilk();
    boolean b16 = recipe0.equals((java.lang.Object)inventory7);
    int i17 = inventory7.getMilk();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + ""+ "'", str2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + ""+ "'", str5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 15);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test404"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getMilk();
    int i2 = inventory0.getCoffee();
    inventory0.setChocolate((int)(short)1);
    int i5 = inventory0.getCoffee();
    java.lang.String str6 = inventory0.toString();
    java.lang.String str7 = inventory0.toString();
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addSugar("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 10\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n"+ "'", str6.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n"+ "'", str7.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 1\n"));

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test405"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array3 = recipeBook0.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook4 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str6 = recipeBook4.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe7 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b8 = recipeBook4.addRecipe(recipe7);
    int i9 = recipe7.getAmtCoffee();
    int i10 = recipe7.getAmtCoffee();
    boolean b11 = recipeBook0.addRecipe(recipe7);
    recipe7.setName("hi!");
    java.lang.String str14 = recipe7.toString();
    int i15 = recipe7.getAmtMilk();
    // The following exception was thrown during execution in test generation
    try {
    recipe7.setAmtMilk("hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "hi!"+ "'", str14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test406"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setMilk((-1));
    inventory0.setSugar((-1));

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test407"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook16 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str18 = recipeBook16.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array19 = recipeBook16.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook20 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str22 = recipeBook20.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b24 = recipeBook20.addRecipe(recipe23);
    int i25 = recipe23.getAmtCoffee();
    int i26 = recipe23.getAmtCoffee();
    boolean b27 = recipeBook16.addRecipe(recipe23);
    recipe23.setName("hi!");
    recipe23.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    boolean b32 = coffeeMaker0.addRecipe(recipe23);
    int i35 = coffeeMaker0.makeCoffee(0, 0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe36 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i37 = recipe36.getPrice();
    java.lang.String str38 = recipe36.toString();
    recipe36.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    boolean b41 = coffeeMaker0.addRecipe(recipe36);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook42 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str44 = recipeBook42.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook45 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory46 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory46.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook49 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str51 = recipeBook49.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe52 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b53 = recipeBook49.addRecipe(recipe52);
    int i54 = recipe52.getAmtCoffee();
    int i55 = recipe52.getAmtCoffee();
    boolean b56 = inventory46.useIngredients(recipe52);
    java.lang.String str57 = recipe52.getName();
    boolean b58 = recipeBook45.addRecipe(recipe52);
    boolean b59 = recipeBook42.addRecipe(recipe52);
    boolean b60 = coffeeMaker0.addRecipe(recipe52);
    int i61 = recipe52.getAmtSugar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + ""+ "'", str38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + ""+ "'", str57.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test408"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory0.setSugar((int)(short)-1);
    inventory0.setCoffee((int)(short)-1);
    int i5 = inventory0.getCoffee();
    inventory0.setChocolate((int)(short)1);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addCoffee("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test409"); }


    edu.ncsu.csc326.coffeemaker.Inventory inventory0 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i1 = inventory0.getCoffee();
    inventory0.setCoffee((int)(byte)-1);
    // The following exception was thrown during execution in test generation
    try {
    inventory0.addSugar("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: ");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.InventoryException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.InventoryException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.InventoryException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 15);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test410"); }


    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException1 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("hi!");
    java.lang.Throwable[] throwable_array2 = inventoryException1.getSuppressed();
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException4 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    inventoryException1.addSuppressed((java.lang.Throwable)inventoryException4);
    java.lang.Throwable[] throwable_array6 = inventoryException4.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array6);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test411"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe((int)(byte)0);
    java.lang.String str4 = recipeBook0.deleteRecipe((int)(short)1);
    java.lang.String str6 = recipeBook0.deleteRecipe((int)(short)0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook8 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str10 = recipeBook8.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i13 = recipe12.getPrice();
    int i14 = recipe12.getAmtChocolate();
    java.lang.String str15 = recipeBook8.editRecipe(0, recipe12);
    recipe12.setName("Coffee: 32\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.String str18 = recipeBook0.editRecipe((int)'a', recipe12);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str15);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test412"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook17 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory18.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook21 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str23 = recipeBook21.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe24 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b25 = recipeBook21.addRecipe(recipe24);
    int i26 = recipe24.getAmtCoffee();
    int i27 = recipe24.getAmtCoffee();
    boolean b28 = inventory18.useIngredients(recipe24);
    java.lang.String str29 = recipe24.getName();
    boolean b30 = recipeBook17.addRecipe(recipe24);
    boolean b31 = coffeeMaker0.addRecipe(recipe24);
    recipe24.setName("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
    int i34 = recipe24.getAmtChocolate();
    // The following exception was thrown during execution in test generation
    try {
    recipe24.setAmtMilk("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException: hi!");
      org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException");
    } catch (edu.ncsu.csc326.coffeemaker.exceptions.RecipeException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("edu.ncsu.csc326.coffeemaker.exceptions.RecipeException")) {
        org.junit.Assert.fail("Expected exception of type edu.ncsu.csc326.coffeemaker.exceptions.RecipeException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test413"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker1 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str4 = coffeeMaker1.editRecipe(0, recipe3);
    edu.ncsu.csc326.coffeemaker.Inventory inventory5 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i6 = inventory5.getMilk();
    int i7 = inventory5.getCoffee();
    inventory5.setChocolate((int)(byte)-1);
    inventory5.setCoffee((int)(byte)10);
    int i12 = inventory5.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe13 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b14 = inventory5.useIngredients(recipe13);
    boolean b15 = coffeeMaker1.addRecipe(recipe13);
    edu.ncsu.csc326.coffeemaker.Recipe recipe17 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i18 = recipe17.getPrice();
    int i19 = recipe17.getAmtChocolate();
    java.lang.String str20 = coffeeMaker1.editRecipe(0, recipe17);
    boolean b21 = coffeeMaker0.addRecipe(recipe17);
    int i22 = recipe17.getAmtSugar();
    recipe17.setName("");
    boolean b26 = recipe17.equals((java.lang.Object)(-1));
    int i27 = recipe17.getAmtChocolate();
    edu.ncsu.csc326.coffeemaker.exceptions.InventoryException inventoryException29 = new edu.ncsu.csc326.coffeemaker.exceptions.InventoryException("");
    java.lang.Throwable[] throwable_array30 = inventoryException29.getSuppressed();
    boolean b31 = recipe17.equals((java.lang.Object)inventoryException29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + ""+ "'", str20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(throwable_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test414"); }


    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook0 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str2 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe3 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b4 = recipeBook0.addRecipe(recipe3);
    java.lang.String str6 = recipeBook0.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker7 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe9 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str10 = coffeeMaker7.editRecipe(0, recipe9);
    edu.ncsu.csc326.coffeemaker.Inventory inventory11 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i12 = inventory11.getMilk();
    int i13 = inventory11.getCoffee();
    inventory11.setChocolate((int)(byte)-1);
    inventory11.setCoffee((int)(byte)10);
    int i18 = inventory11.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe19 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b20 = inventory11.useIngredients(recipe19);
    boolean b21 = coffeeMaker7.addRecipe(recipe19);
    edu.ncsu.csc326.coffeemaker.Recipe recipe23 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i24 = recipe23.getPrice();
    int i25 = recipe23.getAmtChocolate();
    java.lang.String str26 = coffeeMaker7.editRecipe(0, recipe23);
    java.lang.String str27 = coffeeMaker7.checkInventory();
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array28 = coffeeMaker7.getRecipes();
    edu.ncsu.csc326.coffeemaker.Inventory inventory29 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i30 = inventory29.getMilk();
    int i31 = inventory29.getCoffee();
    int i32 = inventory29.getMilk();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook33 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str35 = recipeBook33.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe36 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b37 = recipeBook33.addRecipe(recipe36);
    int i38 = recipe36.getAmtCoffee();
    edu.ncsu.csc326.coffeemaker.Inventory inventory39 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i40 = inventory39.getMilk();
    int i41 = inventory39.getCoffee();
    inventory39.setChocolate((int)(byte)-1);
    int i44 = inventory39.getChocolate();
    boolean b45 = recipe36.equals((java.lang.Object)inventory39);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook46 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str48 = recipeBook46.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook49 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory50 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory50.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook53 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str55 = recipeBook53.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe56 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b57 = recipeBook53.addRecipe(recipe56);
    int i58 = recipe56.getAmtCoffee();
    int i59 = recipe56.getAmtCoffee();
    boolean b60 = inventory50.useIngredients(recipe56);
    java.lang.String str61 = recipe56.getName();
    boolean b62 = recipeBook49.addRecipe(recipe56);
    boolean b63 = recipeBook46.addRecipe(recipe56);
    boolean b64 = inventory39.useIngredients(recipe56);
    boolean b65 = inventory29.useIngredients(recipe56);
    boolean b66 = coffeeMaker7.addRecipe(recipe56);
    boolean b67 = recipeBook0.addRecipe(recipe56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + ""+ "'", str6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str27.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + ""+ "'", str61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test415"); }


    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker0 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe2 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str3 = coffeeMaker0.editRecipe(0, recipe2);
    edu.ncsu.csc326.coffeemaker.Inventory inventory4 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i5 = inventory4.getMilk();
    int i6 = inventory4.getCoffee();
    inventory4.setChocolate((int)(byte)-1);
    inventory4.setCoffee((int)(byte)10);
    int i11 = inventory4.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe12 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b13 = inventory4.useIngredients(recipe12);
    boolean b14 = coffeeMaker0.addRecipe(recipe12);
    java.lang.String str15 = coffeeMaker0.checkInventory();
    java.lang.String str16 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook17 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    edu.ncsu.csc326.coffeemaker.Inventory inventory18 = new edu.ncsu.csc326.coffeemaker.Inventory();
    inventory18.setSugar((int)(short)-1);
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook21 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str23 = recipeBook21.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe24 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b25 = recipeBook21.addRecipe(recipe24);
    int i26 = recipe24.getAmtCoffee();
    int i27 = recipe24.getAmtCoffee();
    boolean b28 = inventory18.useIngredients(recipe24);
    java.lang.String str29 = recipe24.getName();
    boolean b30 = recipeBook17.addRecipe(recipe24);
    boolean b31 = coffeeMaker0.addRecipe(recipe24);
    java.lang.String str32 = coffeeMaker0.checkInventory();
    edu.ncsu.csc326.coffeemaker.CoffeeMaker coffeeMaker33 = new edu.ncsu.csc326.coffeemaker.CoffeeMaker();
    edu.ncsu.csc326.coffeemaker.Recipe recipe35 = new edu.ncsu.csc326.coffeemaker.Recipe();
    java.lang.String str36 = coffeeMaker33.editRecipe(0, recipe35);
    edu.ncsu.csc326.coffeemaker.Inventory inventory37 = new edu.ncsu.csc326.coffeemaker.Inventory();
    int i38 = inventory37.getMilk();
    int i39 = inventory37.getCoffee();
    inventory37.setChocolate((int)(byte)-1);
    inventory37.setCoffee((int)(byte)10);
    int i44 = inventory37.getCoffee();
    edu.ncsu.csc326.coffeemaker.Recipe recipe45 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b46 = inventory37.useIngredients(recipe45);
    boolean b47 = coffeeMaker33.addRecipe(recipe45);
    java.lang.String str48 = coffeeMaker33.checkInventory();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook49 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str51 = recipeBook49.deleteRecipe((int)(byte)0);
    edu.ncsu.csc326.coffeemaker.Recipe[] recipe_array52 = recipeBook49.getRecipes();
    edu.ncsu.csc326.coffeemaker.RecipeBook recipeBook53 = new edu.ncsu.csc326.coffeemaker.RecipeBook();
    java.lang.String str55 = recipeBook53.deleteRecipe(0);
    edu.ncsu.csc326.coffeemaker.Recipe recipe56 = new edu.ncsu.csc326.coffeemaker.Recipe();
    boolean b57 = recipeBook53.addRecipe(recipe56);
    int i58 = recipe56.getAmtCoffee();
    int i59 = recipe56.getAmtCoffee();
    boolean b60 = recipeBook49.addRecipe(recipe56);
    recipe56.setName("hi!");
    recipe56.setName("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n");
    boolean b65 = coffeeMaker33.addRecipe(recipe56);
    edu.ncsu.csc326.coffeemaker.Recipe recipe66 = new edu.ncsu.csc326.coffeemaker.Recipe();
    int i67 = recipe66.getPrice();
    java.lang.String str68 = recipe66.toString();
    boolean b69 = coffeeMaker33.addRecipe(recipe66);
    boolean b70 = coffeeMaker0.addRecipe(recipe66);
    java.lang.String str71 = recipe66.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str15.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str16.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str32.equals("Coffee: 15\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"+ "'", str48.equals("Coffee: 10\nMilk: 15\nSugar: 15\nChocolate: 15\n"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(recipe_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(str55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + ""+ "'", str68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + ""+ "'", str71.equals(""));

  }

}
